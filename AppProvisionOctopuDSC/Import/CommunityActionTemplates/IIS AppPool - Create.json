{
  "$type": "Octopus.Core.Model.Projects.CommunityActionTemplate, Octopus.Core",
  "Id": "CommunityActionTemplates-112",
  "Name": "IIS AppPool - Create",
  "ExternalId": "70a293d6-ee6a-4755-8e06-5f13d7e51fff",
  "Description": "Creates or Reconfigures an IIS Application Pool",
  "Version": 8,
  "ActionType": "Octopus.Script",
  "Author": "ekrapfl",
  "Website": "https://library.octopus.com/step-templates/70a293d6-ee6a-4755-8e06-5f13d7e51fff",
  "HistoryUrl": "https://github.com/OctopusDeploy/Library/commits/master/step-templates/iis-apppool-create.json",
  "Category": "IIS",
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "## --------------------------------------------------------------------------------------\n## Input\n## --------------------------------------------------------------------------------------\n\n$appPoolName = $OctopusParameters['AppPoolName']\n\n$appPoolIdentityType = $OctopusParameters['AppPoolIdentityType']\nIF ($appPoolIdentityType -eq 3)\n{\n    $appPoolIdentityUser = $OctopusParameters['AppPoolIdentityUser']\n    $appPoolIdentityPassword = $OctopusParameters['AppPoolIdentityPassword']\n}\n\n$appPoolLoadUserProfile = [boolean]::Parse($OctopusParameters['AppPoolLoadUserProfile'])\n\n$appPoolAutoStart = [boolean]::Parse($OctopusParameters['AppPoolAutoStart'])\n$appPoolEnable32BitAppOnWin64 = [boolean]::Parse($OctopusParameters['AppPoolEnable32BitAppOnWin64'])\n\n$appPoolManagedRuntimeVersion = $OctopusParameters['AppPoolManagedRuntimeVersion']\n$appPoolManagedPipelineMode = $OctopusParameters['AppPoolManagedPipelineMode']\n\n$appPoolIdleTimeout = [TimeSpan]::FromMinutes($OctopusParameters['AppPoolIdleTimeoutMinutes'])\n$appPoolMaxProcesses = [int]$OctopusParameters['AppPoolMaxProcesses']\n$appPoolRegularTimeInterval = [TimeSpan]::FromMinutes($OctopusParameters['AppPoolRegularTimeInterval'])\n$appPoolQueueLength = [int]$OctopusParameters['AppPoolQueueLength']\n\n$appPoolStartMode = $OctopusParameters['AppPoolStartMode']\n\n$appPoolCpuAction = $OctopusParameters['AppPoolCpuLimitAction']\n$appPoolCpuLimit = [int]$OctopusParameters['AppPoolCpuLimit']\n\n## --------------------------------------------------------------------------------------\n## Helpers\n## --------------------------------------------------------------------------------------\n# Helper for validating input parameters\nfunction Validate-Parameter([string]$foo, [string[]]$validInput, $parameterName) {\n    IF (! $parameterName -contains \"Password\")\n    {\n        Write-Host \"${parameterName}: $foo\"\n    }\n    if (! $foo) {\n        Write-Host \"No value was set for $($parameterName), and it cannot be empty\"\n    }\n}\n\n# Helper to run a block with a retry if things go wrong\n$maxFailures = 5\n$sleepBetweenFailures = Get-Random -minimum 1 -maximum 4\nfunction Execute-WithRetry([ScriptBlock] $command) {\n\t$attemptCount = 0\n\t$operationIncomplete = $true\n\n\twhile ($operationIncomplete -and $attemptCount -lt $maxFailures) {\n\t\t$attemptCount = ($attemptCount + 1)\n\n\t\tif ($attemptCount -ge 2) {\n\t\t\tWrite-Output \"Waiting for $sleepBetweenFailures seconds before retrying...\"\n\t\t\tStart-Sleep -s $sleepBetweenFailures\n\t\t\tWrite-Output \"Retrying...\"\n\t\t}\n\n\t\ttry {\n\t\t\t& $command\n\n\t\t\t$operationIncomplete = $false\n\t\t} catch [System.Exception] {\n\t\t\tif ($attemptCount -lt ($maxFailures)) {\n\t\t\t\tWrite-Output (\"Attempt $attemptCount of $maxFailures failed: \" + $_.Exception.Message)\n\n\t\t\t}\n\t\t\telse {\n\t\t\t    throw \"Failed to execute command\"\n\t\t\t}\n\t\t}\n\t}\n}\n\n## --------------------------------------------------------------------------------------\n## Configuration\n## --------------------------------------------------------------------------------------\nValidate-Parameter $appPoolName -parameterName \"Application Pool Name\"\nValidate-Parameter $appPoolIdentityType -parameterName \"Identity Type\"\nIF ($appPoolIdentityType -eq 3)\n{\n    Validate-Parameter $appPoolIdentityUser -parameterName \"Identity UserName\"\n    Validate-Parameter $appPoolIdentityPassword -parameterName \"Identity Password\"\n}\nValidate-Parameter $appPoolLoadUserProfile -parameterName \"Load User Profile\"\nValidate-Parameter $appPoolAutoStart -parameterName \"AutoStart\"\nValidate-Parameter $appPoolEnable32BitAppOnWin64 -parameterName \"Enable 32-Bit Apps on 64-bit Windows\"\n\nValidate-Parameter $appPoolManagedRuntimeVersion -parameterName \"Managed Runtime Version\"\nValidate-Parameter $appPoolManagedPipelineMode -parameterName \"Managed Pipeline Mode\"\n\nValidate-Parameter $appPoolIdleTimeout -parameterName \"Process Idle Timeout\"\nValidate-Parameter $appPoolMaxProcesses -parameterName \"Maximum Worker Processes\"\n\nValidate-Parameter $appPoolStartMode -parameterName \"Start Mode\"\n\nValidate-Parameter $appPoolCpuAction -parameterName \"CPU Limit Action\"\nValidate-Parameter $appPoolCpuLimit -parameterName \"CPU Limit (percent)\"\n\n#Load Web Admin DLL\n[System.Reflection.Assembly]::LoadFrom( \"C:\\windows\\system32\\inetsrv\\Microsoft.Web.Administration.dll\" )\n\nAdd-PSSnapin WebAdministration -ErrorAction SilentlyContinue\nImport-Module WebAdministration -ErrorAction SilentlyContinue\n\n\n## --------------------------------------------------------------------------------------\n## Run\n## --------------------------------------------------------------------------------------\n\n$iis = (New-Object Microsoft.Web.Administration.ServerManager)\n\n$pool = $iis.ApplicationPools | Where {$_.Name -eq $appPoolName} | Select-Object -First 1\n\nIF ($pool -eq $null)\n{\n    Write-Output \"Creating Application Pool '$appPoolName'\"\n    Execute-WithRetry {\n        $iis = (New-Object Microsoft.Web.Administration.ServerManager)\n        $pool = $iis.ApplicationPools.Add($appPoolName);\n        $pool.AutoStart = $appPoolAutoStart;\n        $iis.CommitChanges()\n    }\n}\nELSE\n{\n    Write-Output \"Application Pool '$appPoolName' already exists, reconfiguring.\"\n}\n\nExecute-WithRetry {\n    $iis = (New-Object Microsoft.Web.Administration.ServerManager)\n    $pool = $iis.ApplicationPools | Where {$_.Name -eq $appPoolName} | Select-Object -First 1\n\n    Write-Output \"Setting: AutoStart = $appPoolAutoStart\"\n    $pool.AutoStart = $appPoolAutoStart;\n\n    Write-Output \"Setting: Enable32BitAppOnWin64 = $appPoolEnable32BitAppOnWin64\"\n    $pool.Enable32BitAppOnWin64 = $appPoolEnable32BitAppOnWin64;\n\n    Write-Output \"Setting: IdentityType = $appPoolIdentityType\"\n    $pool.ProcessModel.IdentityType = $appPoolIdentityType\n\n    IF ($appPoolIdentityType -eq 3)\n    {\n        Write-Output \"Setting: UserName = $appPoolIdentityUser\"\n        $pool.ProcessModel.UserName = $appPoolIdentityUser\n\n        Write-Output \"Setting: Password = [Omitted For Security]\"\n        $pool.ProcessModel.Password = $appPoolIdentityPassword\n    }\n\n\tWrite-Output \"Setting: LoadUserProfile = $appPoolLoadUserProfile\"\n    $pool.ProcessModel.LoadUserProfile = $appPoolLoadUserProfile\n\n    Write-Output \"Setting: ManagedRuntimeVersion = $appPoolManagedRuntimeVersion\"\n    if($appPoolManagedRuntimeVersion -eq \"No Managed Code\") {\n        $pool.ManagedRuntimeVersion = \"\"\n    } else { \n        $pool.ManagedRuntimeVersion = $appPoolManagedRuntimeVersion\n    }\n    \n    Write-Output \"Setting: ManagedPipelineMode = $appPoolManagedPipelineMode\"\n    $pool.ManagedPipelineMode = $appPoolManagedPipelineMode\n\n    Write-Output \"Setting: IdleTimeout = $appPoolIdleTimeout\"\n    $pool.ProcessModel.IdleTimeout = $appPoolIdleTimeout\n\n    Write-Output \"Setting: MaxProcesses = $appPoolMaxProcesses\"\n    $pool.ProcessModel.MaxProcesses = $appPoolMaxProcesses\n\n    Write-Output \"Setting: RegularTimeInterval = $appPoolRegularTimeInterval\"\n    $pool.Recycling.PeriodicRestart.Time = $appPoolRegularTimeInterval\n\n    Write-Output \"Setting: QueueLength = $appPoolQueueLength\"\n    $pool.QueueLength = $appPoolQueueLength\n\n    Write-Output \"Setting: CPU Limit (percent) = $appPoolCpuLimit\"\n    ## Limit is stored in 1/1000s of one percent\n    $pool.Cpu.Limit = $appPoolCpuLimit * 1000\n\n    Write-Output \"Setting: CPU Limit Action = $appPoolCpuAction\"\n    $pool.Cpu.Action = $appPoolCpuAction\n\n    if (Get-Member -InputObject $pool -Name StartMode -MemberType Properties)\n    {\n        Write-Output \"Setting: StartMode = $appPoolStartMode\"\n        $pool.StartMode = $appPoolStartMode\n    }\n    else\n    {\n        Write-Output \"IIS does not support StartMode property, skipping this property...\"\n    }\n\n    $iis.CommitChanges()\n}",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.ScriptFileName": "",
    "Octopus.Action.Package.NuGetFeedId": "",
    "Octopus.Action.Package.NuGetPackageId": ""
  },
  "Parameters": [
    {
      "Id": null,
      "Name": "AppPoolName",
      "Label": "Application pool name",
      "HelpText": "The name of the application pool that the application will run under.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "AppPoolIdentityType",
      "Label": "Identity Type",
      "HelpText": "The type of identity that the application pool will be using.",
      "DefaultValue": "3",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "0|Local System\n1|Local Service\n2|Network Service\n3|Specific User...\n4|Application Pool Identity"
      }
    },
    {
      "Id": null,
      "Name": "AppPoolIdentityUser",
      "Label": "Specific User Name",
      "HelpText": "_(Specific User)_ The user name to use with the application pool identity.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "AppPoolIdentityPassword",
      "Label": "Specific User Password",
      "HelpText": "_(Specific User)_ The password for the specific user to use with the application pool identity.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": null,
      "Name": "AppPoolLoadUserProfile",
      "Label": "Load User Profile",
      "HelpText": "This setting specifies whether IIS loads the user profile for an application pool identity.",
      "DefaultValue": "True",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": null,
      "Name": "AppPoolEnable32BitAppOnWin64",
      "Label": "Enable 32-Bit Applications",
      "HelpText": "Allows the application pool to run 32-bit applications when running on 64-bit windows.",
      "DefaultValue": "True",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": null,
      "Name": "AppPoolAutoStart",
      "Label": "Start Automatically",
      "HelpText": "Automatically start the application pool when the application pool is created or whenever IIS is started.",
      "DefaultValue": "True",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": null,
      "Name": "AppPoolManagedRuntimeVersion",
      "Label": "Managed Runtime Version",
      "HelpText": "Specifies the CLR version to be used by the application pool.",
      "DefaultValue": "v4.0",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "v1.1|CLR v1.1 (.NET 1.0, 1.1)\nv2.0|CLR v2.0 (.NET 2.0, 3.0, 3.5)\nv4.0|CLR v4.0 (.NET 4.0, 4.5, 4.6)\nNo Managed Code"
      }
    },
    {
      "Id": null,
      "Name": "AppPoolManagedPipelineMode",
      "Label": "Managed Pipeline Mode",
      "HelpText": "Specifies the request-processing mode that is used to process requests for managed content.",
      "DefaultValue": "0",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "0|Integrated\n1|Classic"
      }
    },
    {
      "Id": null,
      "Name": "AppPoolIdleTimeoutMinutes",
      "Label": "Process Idle Timeout",
      "HelpText": "Amount of time (in minutes) a worker process will remain idle before it shuts down. A value of 0 means the process does not shut down after an idle timeout.",
      "DefaultValue": "20",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "AppPoolMaxProcesses",
      "Label": "Maximum Worker Processes",
      "HelpText": "Maximum number of worker processes permitted to service requests for the application pool.",
      "DefaultValue": "1",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "AppPoolRegularTimeInterval",
      "Label": "Regular Time Interval",
      "HelpText": "Period of time (in minutes) after which an application pool will recycle. A value of 0 means the application pool does not recycle on a regular interval.",
      "DefaultValue": "1740",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "AppPoolQueueLength",
      "Label": "Queue Length",
      "HelpText": "Maximum number of requests that HTTP.sys will queue for the application pool. When the queue is full, new requests receive a 504 \"Service Unavailable\" response.",
      "DefaultValue": "1000",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "AppPoolStartMode",
      "Label": "Start Mode",
      "HelpText": "Specifies whether the application pool should run in On Demand Mode or Always Running Mode.",
      "DefaultValue": "OnDemand",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "OnDemand|On Demand\nAlwaysRunning|Always Running"
      }
    },
    {
      "Id": null,
      "Name": "AppPoolCpuLimit",
      "Label": "CPU Limit (percent)",
      "HelpText": "Configures the maximum percentage of CPU time (in percent) that the worker processes in an application pool are allowed to consume over a period of time as indicated by the resetInterval attribute. If the limit set by the limit attribute is exceeded, an event is written to the event log and an optional set of events can be triggered. These optional events are determined by the action attribute.\n\nThe default value is 0, which disables CPU limiting.",
      "DefaultValue": "0",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "AppPoolCpuLimitAction",
      "Label": "CPU Limit Action",
      "HelpText": "Configures the action that IIS takes when a worker process exceeds its configured CPU limit. The action attribute is configured on a per-application pool basis.\n\nThe action attribute can be one of the following possible values. The default value is NoAction.",
      "DefaultValue": "0",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "0|NoAction\n1|KillW3wp\n2|Throttle\n3|ThrottleUnderLoad"
      }
    }
  ],
  "LogoAttachmentKey": "CommunityActionTemplates-104-2018011412241492",
  "LogoAttachmentMimeType": "image/png"
}