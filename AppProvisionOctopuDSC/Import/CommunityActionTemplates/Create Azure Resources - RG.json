{
  "$type": "Octopus.Core.Model.Projects.CommunityActionTemplate, Octopus.Core",
  "Id": "CommunityActionTemplates-49",
  "Name": "Create Azure Resources - RG",
  "ExternalId": "7ae25451-366d-49cc-a49d-eba03d147db0",
  "Description": "The New-AzureRmResourceGroup cmdlet creates an Azure resource group",
  "Version": 27,
  "ActionType": "Octopus.AzurePowerShell",
  "Author": "IanMoroney",
  "Website": "https://library.octopus.com/step-templates/7ae25451-366d-49cc-a49d-eba03d147db0",
  "HistoryUrl": "https://github.com/OctopusDeploy/Library/commits/master/step-templates/azure-create-new-resourcegroup.json",
  "Category": "Azure",
  "Properties": {
    "Octopus.Action.Azure.AccountId": "#{AzureAccount}",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.ScriptBody": "param([string]$ResourceGroupName,\n    [string]$Location )\n    \n\n\n$ErrorActionPreference = \"Stop\" \n    \n###############################################\n##Step1: Helper Functions\nfunction Get-Param($Name, [switch]$Required, $Default) {\n    $result = $null\n\n    if ($OctopusParameters -ne $null) {\n        $result = $OctopusParameters[$Name]\n    }\n\n    if ($result -eq $null) {\n        $variable = Get-Variable $Name -EA SilentlyContinue   \n        if ($variable -ne $null) {\n            $result = $variable.Value\n        }\n    }\n\n    if ($result -eq $null) {\n        if ($Required) {\n            throw \"Missing parameter value $Name\"\n        } else {\n            $result = $Default\n        }\n    }\n\n    return $result\n}\n\n###############################################\nfunction New-ResourceGroup { \nparam([string]$ResourceGroupName, \n[string]$Location)\n \n    Write-Output '###############################################'\n    Write-Output '##Step1: Create Resource Group '\n    $AzureResourceGroup = Get-AzureRmResourceGroup -Name $ResourceGroupName -ErrorAction SilentlyContinue\n    if ( $null -eq $AzureResourceGroup)\n    {\n        Write-Output \"Resource Group $ResourceGroupName does not exist, creating one ...\"\n        $AzureResourceGroup =New-AzureRmResourceGroup -Name $ResourceGroupName -Location $Location\n    } \n    else{\n        Write-Output \"Resource Group $ResourceGroupName already exists ...\"\n    }\n\n    Write-Output '###############################################'\n    Write-Output '##Step2: Validate Resource Group '\n\n    if ($null -eq $AzureResourceGroup ){\n        Throw \"Failed to create resource group $AzureResourceGroupName\"\n    }\n}\n\n& {\n    param(\n        [string]$ResourceGroupName,\n        [string]$Location\n    ) \n\n    Write-Output \"Variables:\"\n    Write-Output \"ResourceGroupName: $ResourceGroupName\"\n    Write-Output \"Location: $Location\"\n      \n    $resourceGroupParams = @{\n        ResourceGroupName=$ResourceGroupName\n        Location=$Location\n    }\n    \n    ###############################################\n    New-ResourceGroup @resourceGroupParams\n    Write-Output \"Resource Group verified/created\"\n    ###############################################\n\n } `\n (Get-Param 'ResourceGroupName' -Required) `\n (Get-Param 'Location' -Required) \n ",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Package.FeedId": "",
    "Octopus.Action.Script.ScriptFileName": "",
    "Octopus.Action.Package.PackageId": ""
  },
  "Parameters": [
    {
      "Id": null,
      "Name": "ResourceGroupName",
      "Label": "ResourceGroupName",
      "HelpText": "Required: Specifies a name for the resource group. This parameter is required. The resource name must be unique in the subscription.You can use -Name or its alias, -ResourceGroupName.If a resource group with that name already exists, the command prompts you for confirmation before replacing the existing resource group. To suppress the confirmation prompt, use the Force parameter.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "Location",
      "Label": "Location",
      "HelpText": "Required: Specifies the location of the resource group. This parameter is required. Enter an Azure data center location, such as \"West US\" or \"Southeast Asia\".You can place a resource group in any location. The resource group does not have to be in the same location your Azure subscription or the same location as its resources. Resource groups can contain resources from different locations. To determine which location support each resource type, use the Get-AzureRmResourceProvider with the ProviderNamespace parameter cmdlet.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "Tag",
      "Label": "Tag",
      "HelpText": "Optional: Applies the specified tags to the new resource group. Enter new tags or predefined tags that you created by using the New-AzureRmTag cmdlet.A \"tag\" is a name-value pair that you can apply to resources and resource groups. Use tags to categorize your resources, such as by department or cost center, or to track notes or comments about the resources. After you assign tags to resources, you can use the Tag parameters of Find-AzureRmResource and Find-AzureRmResourceGroup to search for resources and groups by tag name or name and value.Every tag must have a name and an optional value. To specify a new tag, FY2015=$null Department=\"IT\" one in each line. To get your predefined tags, use the Get-AzureRmTag cmdlet.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "MultiLineText"
      }
    },
    {
      "Id": null,
      "Name": "AzureAccount",
      "Label": "AzureAccount",
      "HelpText": "Enter the SPN used to connect to Azure",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LogoAttachmentKey": "CommunityActionTemplates-45-2018011412241443",
  "LogoAttachmentMimeType": "image/png"
}