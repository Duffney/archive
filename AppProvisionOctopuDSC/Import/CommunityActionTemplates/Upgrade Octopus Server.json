{
  "$type": "Octopus.Core.Model.Projects.CommunityActionTemplate, Octopus.Core",
  "Id": "CommunityActionTemplates-238",
  "Name": "Upgrade Octopus Server",
  "ExternalId": "4b3a1f09-1827-41bb-88a4-894c6317922b",
  "Description": "This step downloads the latest version of Octopus Server and upgrades an existing instance. Run this step on a tentacle that has privileges to install software and start/stop services on the target server.\n\n**Run this after a database backup step**\n\nTo Use:\n- Install a tentacle on the Octopus Server machine with privileges to install software and start/stop services\n- Add that tentacle to an environment and with a unique role\n- Setup a project for the upgrade process\n- Add a database backup step for your Octopus Server database\n- Add this step, selecting it to run on just the role previously configured\n- Create a release\n- Deploy that release whenever an upgrade is needed\n\nNB: The deployment will show as \"Timed Out\" when the server comes back online",
  "Version": 10,
  "ActionType": "Octopus.Script",
  "Author": "Verzada",
  "Website": "https://library.octopus.com/step-templates/4b3a1f09-1827-41bb-88a4-894c6317922b",
  "HistoryUrl": "https://github.com/OctopusDeploy/Library/commits/master/step-templates/upgrade-octopus-server.json",
  "Category": "Octopus",
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.RunOnServer": "false",
    "Octopus.Action.Script.ScriptBody": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n\nFunction GetLatestVersionOrSpecificVersionOfOctopusServer() \n{\n    if([string]::IsNullOrEmpty($SpecificOctopusServerVersionToInstall))\n    {\n        Write-Host \"No specific version has been selected, getting latest version from octopusdeploy.com\"\n        $versions = Invoke-WebRequest https://octopusdeploy.com/download/upgrade/v3 -UseBasicParsing | ConvertFrom-Json\n        $version = $versions[-1].Version\n        return $version\n    }\n    else \n    {\n    \tWrite-Host \"Specific version has been selected\"\n        return $SpecificOctopusServerVersionToInstall\n    }\n}\n\nFunction GetCurrentlyInstalledVersionOfOctopusServer() \n{\n    $InstalledVersion = (get-item \"$InstallPath\\Octopus.Server.exe\").VersionInfo.fileversion\n    return $installedVersion\n}\n\nFunction DownloadOctopusServer([string] $versionNumber) \n{ \n    Write-Host \"Downloading Octopus Server version $versionNumber\"\n    $tempFile = [System.IO.Path]::GetTempFileName()\n  \ttry\n    {\n        (New-Object System.Net.WebClient).DownloadFile(\"https://download.octopusdeploy.com/octopus/Octopus.$versionNumber-x64.msi\", $tempFile)\n    }\n    catch\n    {\n        Write-Host \"Exception occurred\"\n        echo $_.Exception|format-list -force\n    }\n    Write-Host \"Download completed\"\n    return $tempFile\n}\n\nFunction StopOctopusServer() \n{\n    Write-Host \"Stopping Server\"\n    . \"$InstallPath\\Octopus.Server.exe\" service --stop --console --instance $InstanceName\n}\n\nFunction InstallOctopusServer([object] $tempFile)\n{\n    Write-Host \"Installing ...\"\n    msiexec /i $tempFile /quiet | Out-Null\n}\n\nFunction RemoveTempFile([object] $temporaryFile)\n{   \n    Write-Host \"Deleting downloaded installer\"\n    Remove-Item $temporaryFile\n}\n\nFunction StartOctopusServer()\n{\n    Write-Host \"Starting Octopus Server\"\n    . \"$InstallPath\\Octopus.Server.exe\" service --start --console --instance $InstanceName\n}\n\nFunction InstallSetVersionOnOctopusServer([string] $currentlyInstalledVersion, [string] $selectedVersionToInstall){\n\n      Write-Host \"Currently installed version: $currentlyInstalledVersion\"\n      Write-Host \"Selected version to install: $selectedVersionToInstall\" \n\n      $tempFile = DownloadOctopusServer $selectedVersionToInstall\n      StopOctopusServer\n      InstallOctopusServer $tempFile\n      RemoveTempFile $tempFile\n      StartOctopusServer\n}\n\nFunction StartInstallationOfOctopusServer () {\n\n  ## Get the current state of Octopus Server\n  $selectedVersionToInstall = GetLatestVersionOrSpecificVersionOfOctopusServer \n  $currentlyInstalledVersion = GetCurrentlyInstalledVersionOfOctopusServer\n\n\n  if([version]$selectedVersionToInstall -eq [version]$currentlyInstalledVersion)\n  {\n      Write-host \"Octopus Server has already been installed with version $currentlyInstalledVersion\"   \n  }\n  else  \n  {\n    InstallSetVersionOnOctopusServer $currentlyInstalledVersion $selectedVersionToInstall\n  }\n}\n\nStartInstallationOfOctopusServer"
  },
  "Parameters": [
    {
      "Id": null,
      "Name": "InstanceName",
      "Label": "Instance Name",
      "HelpText": "The name of your octopus instance. For the default instance use `OctopusServer`.",
      "DefaultValue": "OctopusServer",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "InstallPath",
      "Label": "InstallPath",
      "HelpText": "The installation path to Octopus Deploy Server. Not the instance directory",
      "DefaultValue": "C:\\Program Files\\Octopus Deploy\\Octopus",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "SpecificOctopusServerVersionToInstall",
      "Label": "Version number of Octopus Server which is going to be installed",
      "HelpText": "Selects a specific version of Octopus Server to install. This is especially handy for a downgrade. The version number must be valid though.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LogoAttachmentKey": "CommunityActionTemplates-226-2018011412241620",
  "LogoAttachmentMimeType": "image/png"
}