{
  "$type": "Octopus.Core.Model.Projects.CommunityActionTemplate, Octopus.Core",
  "Id": "CommunityActionTemplates-173",
  "Name": "RavenDB - Update Properties within a Document",
  "ExternalId": "89806198-6216-4034-a934-6de6a3f445b0",
  "Description": "Retrieves the specified document by a Raven Query, updates selected variables with values from octopus Variables. Replaces the current document with the newly created document with the updated values.\n**IMPORTANT**: Any variable that is being updated **MUST** have an Octopus Variable that has exactly the same name (including capitals, any special characters, etc.) prefixed with “Property_”. This is the case of **BOTH** document variables and Metadata variables. I.E. if you wanted TestMode change, you **MUST** have an Octopus Variable named Property_TestMode (same name, and capitals, etc.).\n",
  "Version": 50,
  "ActionType": "Octopus.Script",
  "Author": "timhunt303",
  "Website": "https://library.octopus.com/step-templates/89806198-6216-4034-a934-6de6a3f445b0",
  "HistoryUrl": "https://github.com/OctopusDeploy/Library/commits/master/step-templates/ravendb-update-properties-within-a-document.json",
  "Category": "RavenDB",
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "\n#Variables\n\n#--------------------------------------------------------------------\n#RavenDB database variables\n\n#URL address of RavenDB\n$ravenDatabaseURL = $OctopusParameters[\"ravenDatabaseURL\"]\n\n#Name of the database\n$ravenDatabaseName = $OctopusParameters[\"ravenDatabaseName\"]\n\n#--------------------------------------------------------------------\n#RavenDB Query variables\n\n#Raven Query\n#$ravenQuery = $OctopusParameters[\"ravenQuery\"]\n\n#Name of the settings document\n$ravenDocumentName = $OctopusParameters[\"ravenDocumentName\"]\n\n#--------------------------------------------------------------------\n#Setting Variables\n\n#list of settings variables that are to be changed\n$includeSettingList = $OctopusParameters[\"includeSettingList\"]\n\n#list of settings variables that are NOT to be changed\n$excludeSettingList = $OctopusParameters[\"excludeSettingList\"]\n\n#--------------------------------------------------------------------\n#Metadata variables\n\n#list of metadata variables that are to be changed\n$includeMetadataList = $OctopusParameters[\"includeMetadataList\"]\n\n#list of metadata variables that are NOT to be changed\n$excludeMetadataList = $OctopusParameters[\"excludeMetadataList\"]\n\n\n#--------------------------------------------------------------------\n#other variables\n\n$octopusVariableList = $OctopusParameters.GetEnumerator()\n\n\n\nWrite-Output \"`n-------------------------`n\"\n#--------------------------------------------------------------------\n#checks to see if the entered database exists, return a Boolean value depending on the outcome\nfunction doesRavenDBExist([string] $databaseChecking, [string]$URL)\n{\n    #retrieves the list of databases at the specified URL\n    $database_list = Invoke-RestMethod -Uri \"$ravenDatabaseURL/databases\" -Method Get\n    #checks if the database is at the specified URL\n    if ($database_list -contains $databaseChecking.ToString()) \n    {\n        return $TRUE\n    }\n    else \n    {\n        return $FALSE\n    }\n\n    \n\n}#ends does ravenDB exist function\n\n\nWrite-Output \"`n-------------------------`n\"\n#--------------------------------------------------------------------    \n#check to see if the database exists\n       \n\nWrite-Output \"Checking if $ravenDatabaseName exists\"\n\n$database_exists = doesRavenDBExist -databaseChecking $ravenDatabaseName -URL $ravenDatabaseURL\n\n\n#only proceeds if database exists\nif ($database_exists -eq $TRUE)\n{\n    Write-Output \"$ravenDatabaseName exists\"\n            \n}#ends database exists if statement \nelse \n{\n    Write-Error \"$ravenDatabaseName doesn't exists. `nMake sure the database exists before continuing\" -ErrorId E4\n    Exit 1\n}\n\n\nWrite-Output \"`n-------------------------`n\"   \n         \n#--------------------------------------------------------------------\n#Get current setings and change them accordingly\n\n$allSettingsJSON = $null\n\nWrite-Output \"Getting Document: $ravenDatabaseName\"\n\n$settingsURI = \"$ravenDatabaseURL/databases/$ravenDatabaseName/docs/$ravenDocumentName\"\n\n    \n\ntry {\n    #Gets settings from the specific Uri\n    $allSettings = Invoke-RestMethod -Uri $settingsURI -Method Get\n\n} catch {\n    if ($_.Exception.Response.StatusCode.Value__ -ne 404) {\n  \n    $_.Exception\n    }\n}\n\n#check to make sure the query return some results\nif($allSettings -eq $null)\n{\n    Write-Error \"An error occurred while querying the database. `nThe query did not return any values. `nPlease enter a new query\" -ErrorId E4\n    Exit 1\n}\n\n$includeList = @()\n\n($includeSettingList.Split(\", \") | ForEach {\n    $includeList += $_.ToString()\n})\n\n     \nWrite-Output \"Updating the Settings document\"\ntry\n{\n    \n\n    #changes the values of the included settings within the original settings document to values from Octopus Variables\n    for($i = 0; $i -lt $includeList.length; $i++)\n    {\n        \n        \n        #checks if the any of the include setting list is in the exclude setting list\n        if($excludeSettingList -notcontains $includeList[$i])\n        {\n            \n            \n            $octopusVariableList = $OctopusParameters.GetEnumerator()\n            \n            #loops through the variable list to find the corresponding value to the settings variable\n            foreach($varKey in $octopusVariableList)\n            {\n                \n                \n                $newSettingVar = $includeList[$i].ToString()\n                \n                $newSettingVar = \"Property_$newSettingVar\"\n                \n                #sets the setting variable to the correct variable in octopus\n                if($varKey.Key -eq $newSettingVar)\n                {\n                    \n                    \n\n                    $allSettings.($includeList[$i]) = $varKey.Value \n\n                }#ends if\n\n            }#ends for each\n\n\n\n        }#ends check if settings in excluded list\n\n\n    }#ends for\n}#ends try\ncatch\n{\n    Write-Error \"An error occurred while trying to find the Setting Variables.\" -ErrorId E4\n    Exit 1\n}\n\n\nWrite-Output \"Update complete\"\n\nWrite-Output \"`n-----------------------------\"\n\n#--------------------------------------------------------------------\n#set update metadata information\n\nWrite-Output \"Updating the Metadata of the document\"\n\n$metadata = @{}\n\n$metadataList = @()\n\n($includeMetadataList.Split(\", \") | Foreach {\n    $metadataList += $_.ToString()\n})\n\n\ntry\n{\n    for($i = 0; $i -lt $metadataList.length; $i++)\n    {\n    \n        if($excludeMetadataList -notcontains $metadataList[$i])\n        {\n        \n            $octopusVariableList = $OctopusParameters.GetEnumerator()\n        \n            foreach($varKey in $octopusVariableList)\n            {\n                \n                $newMetadataVar = $metadataList[$i]\n                \n                $newMetadataVar = \"Property_$newMetadataVar\"\n\n                if($varKey.Key -eq $newMetadataVar)\n                {\n                    \n                    $temp = $metadataList[$i].ToString()\n                    \n                    $metadata.Add(\"$temp\", $varKey.Value)\n                    \n                    \n                }\n            \n            }#ends foreach\n\n        }#ends if\n\n    }#Ends for \n}#ends try\ncatch\n{\n    Write-Error \"An error occurred while trying to find the Metadata Variables.\" -ErrorId E4\n    Exit 1\n}\n\n\nWrite-Output \"Metadata update complete\"\n\n\n\n#--------------------------------------------------------------------\n#converting settings to a JSON document\n\nWrite-Output \"Converting settings to a JSON document\"\n\n#Converts allSettings to JSON so it can be added to RavenDB\nif ($allSettingsJSON -eq $null) \n{\n    $allSettingsJSON = ConvertTo-Json -InputObject $allSettings\n}\n\n\n\nWrite-Output \"`n-------------------------`n\"\n\n#--------------------------------------------------------------------\n#inserting settings document\n\nWrite-Output \"Restoring Document: $ravenDatabaseName . Inserting the new settings document to the database\"\n\n#URL to put the JSON document\n$putSettingsURI = \"$ravenDatabaseURL/databases/$ravenDatabaseName/docs/$ravenDocumentName\"\n\n#Puts the settings and metadata in the specified RavenDB\ntry\n{\n\n    Invoke-RestMethod -Uri $putSettingsURI -Headers $metadata -Body $allSettingsJSON -Method Put\n        \n    Write-Output \"New settings have been successfully added to the database\"\n}\ncatch\n{\n    Write-Error \"An error occurred while inserting the new settings document to the database\" -ErrorId E4\n} \n\n"
  },
  "Parameters": [
    {
      "Id": null,
      "Name": "ravenDatabaseURL",
      "Label": "URL of the Database",
      "HelpText": "The URL of the database.\n\nFor example: **http://localhost:8080/**",
      "DefaultValue": "http://localhost:8080/",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "ravenDatabaseName",
      "Label": "Name of the Database",
      "HelpText": "Name of the database in Raven",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "ravenDocumentName",
      "Label": "Name of the Document",
      "HelpText": "Name of the document in Raven that the program will retrieve.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "includeSettingList",
      "Label": "List of Included Document Variables",
      "HelpText": "A List of document variables that the program will update based on values within Octopus Variables\n\n**IMPORTANT:** The names of the variables **MUST** be the same (including capitals, special characters, etc.)",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "excludeSettingList",
      "Label": "List of Excluded Document Variables",
      "HelpText": "A list of document variables that the step will exclude from the updated version. \n\nFor example: if TestMode is in both the include and exclude document list, then TestMode will be excluded from the update.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "includeMetadataList",
      "Label": "List of Included Metadata Variables",
      "HelpText": "A List of Metadata variables that the program will update based on values within Octopus Variables\n\n**IMPORTANT:** The names of the variables **MUST** be the same (including capitals, special characters, etc.)",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "excludeMetadataList",
      "Label": "List of Excluded Metadata Variables",
      "HelpText": "A list of Metadata variables that the step will exclude from the updated version. \n\nFor example: if Raven-Entity-Name is in both the include and exclude metadata lists, then Raven-Entity-Name will be excluded from the update.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LogoAttachmentKey": "CommunityActionTemplates-164-2018011412241569",
  "LogoAttachmentMimeType": "image/png"
}