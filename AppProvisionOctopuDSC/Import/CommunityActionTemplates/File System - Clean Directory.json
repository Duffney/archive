{
  "$type": "Octopus.Core.Model.Projects.CommunityActionTemplate, Octopus.Core",
  "Id": "CommunityActionTemplates-76",
  "Name": "File System - Clean Directory",
  "ExternalId": "e56aafe2-0d59-453b-9449-d7384914468d",
  "Description": "Clean out unwanted files from the installation directory after a deployment.",
  "Version": 26,
  "ActionType": "Octopus.Script",
  "Author": "Lavinski",
  "Website": "https://library.octopus.com/step-templates/e56aafe2-0d59-453b-9449-d7384914468d",
  "HistoryUrl": "https://github.com/OctopusDeploy/Library/commits/master/step-templates/file-system-clean-directory.json",
  "Category": "File System",
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "# Running outside octopus\nparam(\n\t[string]$cleanInclude,\n\t[string]$cleanIgnore,\n\t[string]$pathsToClean,\n\t[switch]$whatIf\n) \n\nfunction ExpandPathExpressions($workingDirectory, $fileExpressionList) {\n\treturn @($fileExpressionList.Split(@(\";\"), \"RemoveEmptyEntries\")) | \n\t% { $_.Trim() } |\n\t% { ExpandPathExpression $workingDirectory $_ }\n}\n\nfunction ExpandPathExpression($workingDirectory, $FileExpression) {\n\n\t# \\**\\ denotes a recursive search\n\t$recurse = \"**\"\n\n\t# Scope the clean!\n\t$fileExpression = Join-Path $workingDirectory $fileExpression\n\n\t$headSegments = Split-Path $fileExpression\n\t$lastSegment = Split-Path $fileExpression -Leaf\n\t$secondLastSegment = $(if($headSegments -ne \"\") {Split-Path $headSegments -Leaf} else {$null}) \n\n\t$path = \"\\\"\n\t$recursive = $false\n\t$filter = \"*\"\n\t\n\tif ($lastSegment -eq $recurse) {\t\n\t\n\t\t$path = $headSegments\n\t\t$recursive = $true\n\t\t\n\t} elseif ($secondLastSegment -eq $recurse) {\n\t\t\n\t\t$path = Split-Path $headSegments\n\t\t$recursive = $true\n\t\t$filter = $lastSegment\t\n\t\n\t} else {\n\t\t\n\t\t$path = $headSegments\n\t\t$filter = $lastSegment \n\t}\n\n\treturn Get-ChildItem -Path $path -Filter $filter -Recurse:$recursive | ? { !$_.PSIsContainer }\n}\n\nfunction GetParam($Name, [switch]$Required) {\n\t$result = $null\n\t\n\tif ($OctopusParameters -ne $null) {\n\t\t$result = $OctopusParameters[$Name]\n\t}\n\n\tif ($result -eq $null) {\n\t\t$variable = Get-Variable $Name -EA SilentlyContinue\t\n\t\tif ($variable -ne $null) {\n\t\t\t$result = $variable.Value\n\t\t}\n\t}\n\t\n\tif ($Required -and $result -eq $null) {\n\t\tthrow \"Missing parameter value $Name\"\n\t}\n\t\n\treturn $result\n}\n\n& {\n\tparam(\n\t\t[string]$cleanInclude,\n\t\t[string]$cleanIgnore,\n\t\t[string]$pathsToClean\n\t) \n\n\tWrite-Host \"Cleaning files from installation directory\"\n\tWrite-Host \"Include: $cleanInclude\"\n\tWrite-Host \"Ignore: $cleanIgnore\"\n\tWrite-Host \"Paths To Clean: $pathsToClean\"\n\t\n\tif (!$cleanInclude) {\n\t\tthrow \"You must specify files to include\"\n\t}\n\t\n\tif (!$pathsToClean) {\n\t\tthrow \"You must specify the paths to clean\"\n\t}\n\t\n\t$paths = @($pathsToClean.Split(@(\";\"), \"RemoveEmptyEntries\")) | \n\t% { $_.Trim() }\n\t\n\tforeach ($pathToClean in $paths) {\n\t\t\n\t\tif (Test-Path $pathToClean) {\n\t\t\tWrite-Host \"Scanning directory $pathToClean\"\n\t\t\t\n\t\t\tif ($pathToClean -eq \"\\\" -or $pathToClean -eq \"/\") {\n\t\t\t\tthrow \"Cannot clean root directory\"\n\t\t\t}\n\t\t\t\n\t\t\tcd $pathToClean\n\t\t\t\n\t\t\t$include = ExpandPathExpressions $pathToClean $cleanInclude\n\t\t\t$exclude = ExpandPathExpressions $pathToClean $cleanIgnore\n\t\t\t\n\t\t\tif ($include -eq $null -or $exclude -eq $null) {\n\t\t\t\t$deleteSet = $include\n\t\t\t} else {\n\t\t\t\t$exclude = $exclude | % {$_}\n\t\t\t\t$deleteSet = Compare-Object $include $exclude | ? { $_.SideIndicator -eq \"<=\" } | % { $_.InputObject }\n\t\t\t}\n\t\t\t\n\t\t\tif (!$deleteSet -or $deleteSet.Count -eq 0) {\n\t\t\t\tWrite-Warning \"There were no files matching the criteria\"\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tWrite-Host \"Deleting files\"\n\t\t\t\tif ($whatIf) {\n\t\t\t\t\tWrite-Host \"What if: Performing the operation `\"Remove File`\" on targets\"\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$deleteSet | Write-Host\n\t\t\t\t\n\t\t\t\tif (!$whatIf) {\n\t\t\t\t\t$deleteSet | % { $_.FullName } | Remove-Item -Force -Recurse -WhatIf:$whatIf\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t} else {\n\t\t\t\n\t\t\tWrite-Warning \"Could not locate path `\"$pathToClean`\"\"\n\t\t}\n\t}\n } `\n (GetParam 'CleanInclude' -Required) `\n (GetParam 'CleanIgnore') `\n (GetParam 'PathsToClean')\n ",
    "Octopus.Action.Script.Syntax": "PowerShell"
  },
  "Parameters": [
    {
      "Id": null,
      "Name": "PathsToClean",
      "Label": "Paths to clean",
      "HelpText": "A semicolon-separated list of paths to clean.\n\nUsually you would set this to `Octopus.Action[StepName].Output.Package.InstallationDirectoryPath`.",
      "DefaultValue": "",
      "DisplaySettings": {}
    },
    {
      "Id": null,
      "Name": "CleanInclude",
      "Label": "Files to remove",
      "HelpText": "A semicolon-separated list of path expressions that match files to be removed.\n\nExamples:  \n\n    - *.jpg\n    - web.*.config\n    - **\\*.dll\n    - \\Logs\\**\\*.txt\n    - web.*.config;*.txt\n\n`\\**\\` denotes a recursive search",
      "DefaultValue": "",
      "DisplaySettings": {}
    },
    {
      "Id": null,
      "Name": "CleanIgnore",
      "Label": "Files to ignore",
      "HelpText": "A semicolon-separated list of path expressions that will be not be removed.\n\nExamples:  \n\n    - web.log4net.config\n    - img\\needed.jpg\n    - **\\*.dll\n    - web.config;Release Notes.txt\n\n`\\**\\` denotes a recursive search",
      "DefaultValue": "",
      "DisplaySettings": {}
    }
  ],
  "LogoAttachmentKey": "CommunityActionTemplates-68-2018011412241459",
  "LogoAttachmentMimeType": "image/png"
}