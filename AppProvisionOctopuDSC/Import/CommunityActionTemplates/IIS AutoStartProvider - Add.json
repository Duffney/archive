{
  "$type": "Octopus.Core.Model.Projects.CommunityActionTemplate, Octopus.Core",
  "Id": "CommunityActionTemplates-120",
  "Name": "IIS AutoStartProvider - Add",
  "ExternalId": "20b8c2fd-9194-47e3-948e-badc6c2a30d5",
  "Description": "Add autostartprovider entry so type can be used to warm up applicaiton. Final changes in applicationHost.config look like that:\n\n<serviceAutoStartProviders>\n    <add name=\"ApplicationPreload\" type=\"WebApplication1.ApplicationPreload, WebApplication1\" />\n</serviceAutoStartProviders>\n\nwhere name and type are taken from parameters.",
  "Version": 0,
  "ActionType": "Octopus.Script",
  "Author": "jmalczak",
  "Website": "https://library.octopus.com/step-templates/20b8c2fd-9194-47e3-948e-badc6c2a30d5",
  "HistoryUrl": "https://github.com/OctopusDeploy/Library/commits/master/step-templates/iis-autostartprovider-add.json",
  "Category": "IIS",
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "# Running outside octopus\nparam(\n        [string]$serviceName,\n        [string]$serviceType,\n        [switch]$whatIf\n     ) \n\n$ErrorActionPreference = \"Stop\" \n\nfunction Get-Param($Name, [switch]$Required, $Default) {\n    $result = $null\n\n        if ($OctopusParameters -ne $null) {\n            $result = $OctopusParameters[$Name]\n        }\n\n    if ($result -eq $null) {\n        $variable = Get-Variable $Name -EA SilentlyContinue   \n            if ($variable -ne $null) {\n                $result = $variable.Value\n            }\n    }\n\n    if ($result -eq $null -or $result -eq \"\") {\n        if ($Required) {\n            throw \"Missing parameter value $Name\"\n        } else {\n            $result = $Default\n        }\n    }\n\n    return $result\n}\n\n& {\n    param(\n            [string]$serviceName,\n            [string]$serviceType\n         ) \n\n        Write-Host \"Setting $serviceName, $serviceType service autostart provider\"\n\n        try {\n            Add-PSSnapin WebAdministration -ErrorAction SilentlyContinue\n            Import-Module WebAdministration -ErrorAction SilentlyContinue\n\n            $oldValue = Get-WebConfiguration -filter /system.applicationHost/serviceAutoStartProviders/add | \n                        Where-Object { $_.Name -eq $serviceName }\n\n            if ($oldValue -eq $null) {\n                Write-Host \"Adding new service type provider $serviceName, $serviceType\"\n                Add-WebConfiguration -filter /system.applicationHost/serviceAutoStartProviders -Value @{name=$serviceName; type=$serviceType}\n            } \n            elseif ($oldValue.Type -eq $serviceType) { \n                Write-Host \"Service provider with the same name and type exists\"\n            } else {\n                $oldValueType = $oldValue.Type\n                Write-Host \"Replacing service type from $oldValueType to $serviceType\"\n                Set-WebConfiguration -filter \"/system.applicationHost/serviceAutoStartProviders/add[@name='$serviceName']\" -Value @{\"type\" = \"$serviceType\"}\n            }\n\n            Write-Host \"Done\"\n        } catch {\n            Write-Host $_.Exception|format-list -force\n            Write-Host \"There was a problem setting property\"    \n        }\n} `\n(Get-Param 'serviceName' -Required) (Get-Param 'serviceType' -Required) \n",
    "Octopus.Action.Script.Syntax": "PowerShell"
  },
  "Parameters": [
    {
      "Id": null,
      "Name": "serviceName",
      "Label": "Name of autostart service",
      "HelpText": null,
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "serviceType",
      "Label": "Type which implements IProcessHostPreloadClient",
      "HelpText": null,
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LogoAttachmentKey": "CommunityActionTemplates-112-2018011412241504",
  "LogoAttachmentMimeType": "image/png"
}