{
  "$type": "Octopus.Core.Model.Projects.CommunityActionTemplate, Octopus.Core",
  "Id": "CommunityActionTemplates-160",
  "Name": "Pingdom - Pause, Resume Uptime Check",
  "ExternalId": "e2324451-0488-4dbf-acc8-656cc2f8defb",
  "Description": "Modifies Pingdom http check using [Modify Check API method](https://www.pingdom.com/resources/api#MethodModify+Check).",
  "Version": 16,
  "ActionType": "Octopus.Script",
  "Author": "sarbis",
  "Website": "https://library.octopus.com/step-templates/e2324451-0488-4dbf-acc8-656cc2f8defb",
  "HistoryUrl": "https://github.com/OctopusDeploy/Library/commits/master/step-templates/pingdom-pause-resume-check.json",
  "Category": "Pingdom",
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.RunOnServer": "false",
    "Octopus.Action.Script.ScriptBody": "Function Get-Parameter() {\n    Param(\n        [parameter(Mandatory=$true)]\n        [string]$Name, \n        [switch]$Required, \n        $Default, \n        [switch]$FailOnValidate\n    )\n\n    $result = $null\n    $errMessage = [string]::Empty\n\n    If ($OctopusParameters -ne $null) {\n        $result = $OctopusParameters[$Name]\n        Write-Host (\"Octopus parameter value for \" + $Name + \": \" + $result)\n    }\n\n    If ($result -eq $null) {\n        $variable = Get-Variable $Name -EA SilentlyContinue\n        if ($variable -ne $null) {\n            $result = $variable.Value\n        }\n    }\n\n    If ($result -eq $null -or [string]::IsNullOrEmpty($result)) {\n        If ($Required) {\n            $errMessage = \"Missing value for $Name\"\n        } ElseIf (-Not $Default -eq $null) {\n            Write-Host (\"Default value: \" + $Default)\n            $result = $Default\n        }\n    }\n\n    If (-Not [string]::IsNullOrEmpty($errMessage)) {\n        If ($FailOnValidate) {\n            Throw $errMessage\n        } Else {\n            Write-Warning $errMessage\n        }\n    }\n\n    return $result\n}\n& {\n    Write-Host \"Start PingdomPauseResumeCheck\"\n\n    Add-Type -AssemblyName System.Web\n\n    $pingdomUsername = [string] (Get-Parameter -Name \"Pingdom.Username\" -Required -FailOnValidate)\n    $pingdomPassword = [string] (Get-Parameter -Name \"Pingdom.Password\" -Required -FailOnValidate)\n    $pingdomAppKey = [string] (Get-Parameter -Name \"Pingdom.AppKey\" -Required -FailOnValidate)\n\n    $pingdomCheckId = [string] (Get-Parameter -Name \"Pingdom.CheckId\" -FailOnValidate)\n    $pingdomCheckName = [string] (Get-Parameter -Name \"Pingdom.CheckName\" -FailOnValidate)\n    $pingdomCheckPaused = [string] (Get-Parameter -Name \"Pingdom.CheckPaused\" -Default \"False\" -FailOnValidate)\n\n    $apiVersion = \"2.0\"\n    $url = \"https://api.pingdom.com/api/{0}/checks\" -f $apiVersion\n    $securePassword = ConvertTo-SecureString $pingdomPassword -AsPlainText -Force\n    $credential = New-Object System.Management.Automation.PSCredential($pingdomUsername, $securePassword)\n    $headers = @{ \n        \"App-Key\" = $pingdomAppKey\n    }\n\n    If ([string]::IsNullOrEmpty($pingdomCheckId) -and [string]::IsNullOrEmpty($pingdomCheckName)) {\n        Write-Error \"Please specify CheckId or CheckName!\"\n        Exit\n    } \n    \n    # Find check id by name\n\n    If (-Not [string]::IsNullOrEmpty($pingdomCheckName)) {\n        Write-Host \"Getting uptime check list to find check by name: $url\"\n        Try {\n            $response = Invoke-RestMethod -Uri $url -Method Get -ContentType \"application/json\" -Credential $credential -Headers $headers\n        } Catch {\n            Write-Host \"Error occured when getting uptime check list in Pingdom: \" $_\n        }\n\n        $checkFiltered = $response.checks | Where-Object { $_.name -eq $pingdomCheckName }\n        If ($checkFiltered -eq $null) {\n            Write-Warning \"Check with name $pingdomCheckName not found!\"\n            Exit\n        }\n\n        $pingdomCheckId = $checkFiltered.id\n    }\n\n    If ([string]::IsNullOrEmpty($pingdomCheckId)) {\n        Write-Warning \"Check with name $pingdomCheckName was not found!\"\n        Exit\n    }\n\n    # Pause or resume check\n\n    $url += \"/$pingdomCheckId\"\n\n    $apiParameters = @{}\n    If ($pingdomCheckPaused -eq \"True\") {\n        $apiParameters.Add(\"paused\", \"true\")\n    } Else {\n        $apiParameters.Add(\"paused\", \"false\")\n    }\n\n    If ($apiParameters.Count -gt 0) {\n        $queryString = \"\"\n        $apiParameters.Keys | ForEach-Object { \n            $queryString += ($_ + \"=\" + [Web.HttpUtility]::HtmlEncode($apiParameters.Item($_)) + \"&\")  \n        }\n        $queryString = $queryString.Substring(0, $queryString.Length - 1)\n        $url += \"?$queryString\"\n    }\n\n    Write-Host \"Modifying uptime check: $url\"\n    Try {\n        $response = Invoke-RestMethod -Uri $url -Method Put -ContentType \"application/json\" -Credential $credential -Headers $headers\n        Write-Host $response.message\n    } Catch {\n        Write-Error \"Error occured when adding uptime check in Pingdom: \" $_\n    }\n\n    Write-Host \"End PingdomPauseResumeCheck\"\n}",
    "Octopus.Action.Script.ScriptFileName": "",
    "Octopus.Action.Package.FeedId": "",
    "Octopus.Action.Package.PackageId": ""
  },
  "Parameters": [
    {
      "Id": null,
      "Name": "Pingdom.Username",
      "Label": "Username",
      "HelpText": "Mandatory.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "Pingdom.Password",
      "Label": "Password",
      "HelpText": "Mandatory.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "Pingdom.AppKey",
      "Label": "App key",
      "HelpText": "Mandatory.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "Pingdom.CheckId",
      "Label": "Id",
      "HelpText": null,
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "Pingdom.CheckName",
      "Label": "Name",
      "HelpText": null,
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "Pingdom.CheckPaused",
      "Label": "Paused",
      "HelpText": null,
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    }
  ],
  "LogoAttachmentKey": "CommunityActionTemplates-151-2018011412241561",
  "LogoAttachmentMimeType": "image/png"
}