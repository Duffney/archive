{
  "$type": "Octopus.Core.Model.Projects.CommunityActionTemplate, Octopus.Core",
  "Id": "CommunityActionTemplates-219",
  "Name": "SQL Server - Project Deployment Model - Deploy ISPAC",
  "ExternalId": "efe39ac7-3ab8-4f99-bfdc-aba342278d1a",
  "Description": "This is to deploy ssis packages using 'project deployment model' (ISPAC file )",
  "Version": 0,
  "ActionType": "Octopus.Script",
  "Author": "dorasaa",
  "Website": "https://library.octopus.com/step-templates/efe39ac7-3ab8-4f99-bfdc-aba342278d1a",
  "HistoryUrl": "https://github.com/OctopusDeploy/Library/commits/master/step-templates/sqlserver-project-deployment-model-ispac-deploy.json",
  "Category": "SQL Server",
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.ScriptBody": "#################################################################################################\n# Change source and destination properties\n#################################################################################################\n\n# Source\n$IspacFilePath = \"#{ISPAC_FILE_PATH}\"\n \n# Destination\n$SsisServer =   $OctopusParameters['deploy.dts.server'] \n$FolderName = $OctopusParameters['SSIS_Folder']\n$ProjectName = $OctopusParameters['SSIS_Project']\n\n# Environment\n$EnvironmentName = $OctopusParameters['Environment_Name']  \n$EnvironmentFolderName = $OctopusParameters['SSIS_Folder']\n\n\n# Replace empty projectname with filename\nif (-not $ProjectName)\n{\n  $ProjectName = [system.io.path]::GetFileNameWithoutExtension($IspacFilePath)\n}\n# Replace empty Environment folder with project folder\nif (-not $EnvironmentFolderName)\n{\n  $EnvironmentFolderName = $FolderName\n}\n\nclear\nWrite-Host \"========================================================================================================================================================\"\nWrite-Host \"==                                                         Used parameters                                                                            ==\"\nWrite-Host \"========================================================================================================================================================\"\nWrite-Host \"Ispac File Path        : \" $IspacFilePath\nWrite-Host \"SSIS Server            : \" $SsisServer\nWrite-Host \"Project Folder Path    : \" $FolderName\nWrite-Host \"Project Name           : \" $ProjectName\nWrite-Host \"Environment Name       : \" $EnvironmentName\nWrite-Host \"Environment Folder Path: \" $EnvironmentFolderName\nWrite-Host \"========================================================================================================================================================\"\nWrite-Host \"\"\n\n###########################\n########## ISPAC ##########\n###########################\n# Check if ispac file exists\nif (-Not (Test-Path $IspacFilePath))\n{\n    Throw  [System.IO.FileNotFoundException] \"Ispac file $IspacFilePath doesn't exists!\"\n}\nelse\n{\n    $IspacFileName = split-path $IspacFilePath -leaf\n    Write-Host \"Ispac file\" $IspacFileName \"found\"\n}\n\n\n############################\n########## SERVER ##########\n############################\n# Load the Integration Services Assembly\nWrite-Host \"Connecting to server $SsisServer \"\n$SsisNamespace = \"Microsoft.SqlServer.Management.IntegrationServices\"\n[System.Reflection.Assembly]::LoadWithPartialName($SsisNamespace) | Out-Null;\n\n# Create a connection to the server\n$SqlConnectionstring = \"Data Source=\" + $SsisServer + \";Initial Catalog=master;Integrated Security=SSPI;\"\n$SqlConnection = New-Object System.Data.SqlClient.SqlConnection $SqlConnectionstring\n\n# Create the Integration Services object\n$IntegrationServices = New-Object $SsisNamespace\".IntegrationServices\" $SqlConnection\n\n# Check if connection succeeded\nif (-not $IntegrationServices)\n{\n  Throw  [System.Exception] \"Failed to connect to server $SsisServer \"\n}\nelse\n{\n   Write-Host \"Connected to server\" $SsisServer\n}\n\n\n#############################\n########## CATALOG ##########\n#############################\n# Create object for SSISDB Catalog\n$Catalog = $IntegrationServices.Catalogs[\"SSISDB\"]\n\n# Check if the SSISDB Catalog exists\nif (-not $Catalog)\n{\n    # Catalog doesn't exists. The user should create it manually.\n    # It is possible to create it, but that shouldn't be part of\n    # deployment of packages.\n    Throw  [System.Exception] \"SSISDB catalog doesn't exist. Create it manually!\"\n}\nelse\n{\n    Write-Host \"Catalog SSISDB found\"\n}\n\n\n############################\n########## FOLDER ##########\n############################\n# Create object to the (new) folder\n$Folder = $Catalog.Folders[$FolderName]\n\n# Check if folder already exists\nif (-not $Folder)\n{\n    # Folder doesn't exists, so create the new folder.\n    Write-Host \"Creating new folder\" $FolderName\n    $Folder = New-Object $SsisNamespace\".CatalogFolder\" ($Catalog, $FolderName, $FolderName)\n    $Folder.Create()\n}\nelse\n{\n    Write-Host \"Folder\" $FolderName \"found\"\n}\n\n\n#############################\n########## PROJECT ##########\n#############################\n# Deploying project to folder\nif($Folder.Projects.Contains($ProjectName)) {\n    Write-Host \"Deploying\" $ProjectName \"to\" $FolderName \"(REPLACE)\"\n}\nelse\n{\n    Write-Host \"Deploying\" $ProjectName \"to\" $FolderName \"(NEW)\"\n}\n# Reading ispac file as binary\n[byte[]] $IspacFile = [System.IO.File]::ReadAllBytes($IspacFilePath)\n$Folder.DeployProject($ProjectName, $IspacFile)\n$Project = $Folder.Projects[$ProjectName]\nif (-not $Project)\n{\n    # Something went wrong with the deployment\n    # Don't continue with the rest of the script\n    return \"\"\n}\n\n\n#################################\n########## ENVIRONMENT ##########\n#################################\n# Check if environment name is filled\nif (-not $EnvironmentName)\n{\n    # Kill connection to SSIS\n    $IntegrationServices = $null \n\n    # Stop the deployment script\n    Return \"Ready deploying $IspacFileName without adding environment references\"\n}\n\n# Create object to the (new) folder\n$EnvironmentFolder = $Catalog.Folders[$EnvironmentFolderName]\n\n# Check if environment folder exists\nif (-not $EnvironmentFolder)\n{\n  Throw  [System.Exception] \"Environment folder $EnvironmentFolderName doesn't exist\"\n}\n\n# Check if environment exists\nif(-not $EnvironmentFolder.Environments.Contains($EnvironmentName))\n{\n  Throw  [System.Exception] \"Environment $EnvironmentName doesn't exist in $EnvironmentFolderName \"\n}\nelse\n{\n    # Create object for the environment\n    $Environment = $Catalog.Folders[$EnvironmentFolderName].Environments[$EnvironmentName]\n\n    if ($Project.References.Contains($EnvironmentName, $EnvironmentFolderName))\n    {\n        Write-Host \"Reference to\" $EnvironmentName \"found\"\n    }\n    else\n    {\n        Write-Host \"Adding reference to\" $EnvironmentName\n        $Project.References.Add($EnvironmentName, $EnvironmentFolderName)\n        $Project.Alter() \n    }\n}\n\n\n########################################\n########## PROJECT PARAMETERS ##########\n########################################\n$ParameterCount = 0\n# Loop through all project parameters\nforeach ($Parameter in $Project.Parameters)\n{\n    # Get parameter name and check if it exists in the environment\n    $ParameterName = $Parameter.Name\n    if ($ParameterName.StartsWith(\"CM.\",\"CurrentCultureIgnoreCase\")) \n    { \n        # Ignoring connection managers \n    } \n    elseif ($ParameterName.StartsWith(\"INTERN_\",\"CurrentCultureIgnoreCase\")) \n    { \n        # Optional:\n        # Internal parameters are ignored (where name starts with INTERN_) \n        Write-Host \"Ignoring Project parameter\" $ParameterName \" (internal use only)\" \n    } \n    elseif ($Environment.Variables.Contains($Parameter.Name))\n    {\n        $ParameterCount = $ParameterCount + 1\n        Write-Host \"Project parameter\" $ParameterName \"connected to environment\"\n        $Project.Parameters[$Parameter.Name].Set([Microsoft.SqlServer.Management.IntegrationServices.ParameterInfo+ParameterValueType]::Referenced, $Parameter.Name)\n        $Project.Alter()\n    }\n    else\n    {\n        # Variable with the name of the project parameter is not found in the environment\n        # Throw an exeception or remove next line to ignore parameter\n        Throw  [System.Exception]  \"Project parameter $ParameterName doesn't exist in environment\"\n    }\n}\nWrite-Host \"Number of project parameters mapped:\" $ParameterCount\n\n\n########################################\n########## PACKAGE PARAMETERS ##########\n########################################\n$ParameterCount = 0\n# Loop through all packages\nforeach ($Package in $Project.Packages)\n{\n    # Loop through all package parameters\n    foreach ($Parameter in $Package.Parameters)\n    {\n        # Get parameter name and check if it exists in the environment\n        $PackageName = $Package.Name\n        $ParameterName = $Parameter.Name \n        if ($ParameterName.StartsWith(\"CM.\",\"CurrentCultureIgnoreCase\")) \n        { \n            # Ignoring connection managers \n        } \n        elseif ($ParameterName.StartsWith(\"INTERN_\",\"CurrentCultureIgnoreCase\")) \n        { \n            # Optional:\n            # Internal parameters are ignored (where name starts with INTERN_) \n            Write-Host \"Ignoring Package parameter\" $ParameterName \" (internal use only)\" \n        } \n        elseif ($Environment.Variables.Contains($Parameter.Name))\n        {\n            $ParameterCount = $ParameterCount + 1\n            Write-Host \"Package parameter\" $ParameterName \"from package\" $PackageName \"connected to environment\"\n            $Package.Parameters[$Parameter.Name].Set([Microsoft.SqlServer.Management.IntegrationServices.ParameterInfo+ParameterValueType]::Referenced, $Parameter.Name)\n            $Package.Alter()\n        }\n        else\n        {\n            # Variable with the name of the package parameter is not found in the environment\n            # Throw an exeception or remove next line to ignore parameter\n            Throw  [System.Exception]  \"Package parameter $ParameterName from package $PackageName doesn't exist in environment\"\n        }\n    }\n}\nWrite-Host \"Number of package parameters mapped:\" $ParameterCount\n\n\n###########################\n########## READY ##########\n###########################\n# Kill connection to SSIS\n$IntegrationServices = $null \n\n\nReturn \"Ready deploying $IspacFileName \"",
    "Octopus.Action.Script.ScriptFileName": "",
    "Octopus.Action.Package.NuGetFeedId": "",
    "Octopus.Action.Package.NuGetPackageId": ""
  },
  "Parameters": [
    {
      "Id": null,
      "Name": "ISPAC_FILE_PATH",
      "Label": "Ispac file path",
      "HelpText": "Once the SSIS project is compiled \"ispac\" file gets created, this variable must hold the path of the ispac file.",
      "DefaultValue": "",
      "DisplaySettings": {}
    },
    {
      "Id": null,
      "Name": "deploy.dts.server",
      "Label": "SSIS Server name",
      "HelpText": "SSIS Server name where this ssis packages must be deployed.",
      "DefaultValue": "",
      "DisplaySettings": {}
    },
    {
      "Id": null,
      "Name": "SSIS_Folder",
      "Label": "SSIS Folder name",
      "HelpText": "SSIS folder name which is created under SSISDB",
      "DefaultValue": "",
      "DisplaySettings": {}
    },
    {
      "Id": null,
      "Name": "SSIS_Project",
      "Label": "Project Name",
      "HelpText": "SSIS Project name - this is the physical folder name where the OD is referring to .",
      "DefaultValue": "",
      "DisplaySettings": {}
    },
    {
      "Id": null,
      "Name": "Environment_Name",
      "Label": "Environment Name",
      "HelpText": "This is the environment name where variables exists.",
      "DefaultValue": "",
      "DisplaySettings": {}
    }
  ],
  "LogoAttachmentKey": "CommunityActionTemplates-210-2018011412241609",
  "LogoAttachmentMimeType": "image/png"
}