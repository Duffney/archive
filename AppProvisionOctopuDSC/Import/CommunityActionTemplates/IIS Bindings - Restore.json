{
  "$type": "Octopus.Core.Model.Projects.CommunityActionTemplate, Octopus.Core",
  "Id": "CommunityActionTemplates-122",
  "Name": "IIS Bindings - Restore",
  "ExternalId": "9d357886-1896-4240-a89f-118c7ca8ec05",
  "Description": "This step will restore IIS bindings from backup taken in IIS Bindings - Backup step. Only bindings which doesn't exist will be restored.",
  "Version": 9,
  "ActionType": "Octopus.Script",
  "Author": "kria",
  "Website": "https://library.octopus.com/step-templates/9d357886-1896-4240-a89f-118c7ca8ec05",
  "HistoryUrl": "https://github.com/OctopusDeploy/Library/commits/master/step-templates/iis-bindings-restore.json",
  "Category": "IIS",
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "# Running outside octopus\nparam(\n    [string]$webSiteName,\n    [string]$backupFolder,\n    [switch]$whatIf\n) \n\n$ErrorActionPreference = \"Stop\" \n\nfunction Get-Param($Name, [switch]$Required, $Default) {\n    $result = $null\n\n    if ($OctopusParameters -ne $null) {\n        $result = $OctopusParameters[$Name]\n    }\n\n    if ($result -eq $null) {\n        $variable = Get-Variable $Name -EA SilentlyContinue   \n        if ($variable -ne $null) {\n            $result = $variable.Value\n        }\n    }\n\n    if ($result -eq $null -or $result -eq \"\") {\n        if ($Required) {\n            throw \"Missing parameter value $Name\"\n        } else {\n            $result = $Default\n        }\n    }\n\n    return $result\n}\n\nfunction Get-File-Name($backupFolder, $webSiteName) {\n    $folder = Join-Path -Path $backupFolder -ChildPath $webSiteName\n\n    if((Test-Path $folder) -eq $false) {\n        mkdir $folder | Out-Null\n    }\n\n    $fullPath = $null;\n\n    if($OctopusParameters -eq $null) {\n         $fullPath = Join-Path -Path $folder -ChildPath \"site_backup.xml\"\n    } else {\n         $fileName = $OctopusParameters[\"Octopus.Release.Number\"] + \"_\" + $OctopusParameters[\"Octopus.Environment.Name\"] + \".xml\"\n         $fullPath = Join-Path -Path $folder -ChildPath $fileName\n    }\n\n    return $fullPath\n}\n\n& {\n    param(\n        [string]$webSiteName,\n        [string]$backupFolder\n    ) \n\n    Write-Host \"Restore $webSiteName bindings from bindings variable\"\n\n    try {\n        Add-PSSnapin WebAdministration -ErrorAction SilentlyContinue\n        Import-Module WebAdministration -ErrorAction SilentlyContinue\n         \n        $bindingsBackupFile = Get-File-Name $backupFolder $webSiteName\n        $currentBindings = Import-CliXML $bindingsBackupFile \n\n        if($currentBindings -eq $null) {\n            Write-Host \"There is no saved bindings, you have to run IIS save bindings before\"\n        } else {\n            foreach($binding in $currentBindings) {\n                $bindingArray = $binding.bindingInformation.Split(\":\")\n                $existing = Get-WebBinding -Name $webSiteName -Protocol $binding.protocol -IPAddress $bindingArray[0] -Port $bindingArray[1] -HostHeader $bindingArray[2]\n\n                if($existing -eq $null) {\n                    Write-Host \"Adding binding\" $binding.protocol $binding.bindingInformation                    \n                    New-WebBinding -Name $webSiteName -Protocol $binding.protocol -IPAddress $bindingArray[0] -Port $bindingArray[1] -HostHeader $bindingArray[2] -SslFlags $binding.sslFlags\n                    if ($binding.protocol -eq \"https\" -and $binding.certificateHash) {\n                        $newBinding = Get-WebBinding -Name $webSiteName -Protocol $binding.protocol -IPAddress $bindingArray[0] -Port $bindingArray[1] -HostHeader $bindingArray[2]\n                        Write-Host \"Assigning certificate\" $binding.certificateHash \"to binding\"\n                        $newBinding.AddSslCertificate($binding.certificateHash, $binding.certificateStoreName)\n                    }\n                }\n            }\n        }\n\n        Write-Host \"Done\"\n    } catch {\n        Write-Host $_.Exception|format-list -force\n        Write-Host \"There was a problem restoring bindings\"    \n    }\n\n } `\n (Get-Param 'webSiteName' -Required) (Get-Param 'backupFolder' -Required)\n",
    "Octopus.Action.Script.Syntax": "PowerShell"
  },
  "Parameters": [
    {
      "Id": null,
      "Name": "webSiteName",
      "Label": "Web Site Name",
      "HelpText": "Name of the web site for which bindings will be restored from backup taken in previous IIS Bindings - Backup task. Only bindings which doesn't already exist will be restored.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "backupFolder",
      "Label": "Folder where backed up binding file is stored",
      "HelpText": null,
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LogoAttachmentKey": "CommunityActionTemplates-114-2018011412241508",
  "LogoAttachmentMimeType": "image/png"
}