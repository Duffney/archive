{
  "$type": "Octopus.Core.Model.Projects.CommunityActionTemplate, Octopus.Core",
  "Id": "CommunityActionTemplates-63",
  "Name": "Dyn - Create an A Record",
  "ExternalId": "5e359c05-89a0-4a13-98a4-d54b0415bb45",
  "Description": "Creates an A record in the specified zone with the specified details. \n\nNOTE: The API User MUST have the follow permissions:\n\t- UserLogin\n\t- UserChangepw\n\t- RecordAdd\n\t- RecordUpdate\n        - RecordGet\n\t- ZoneGet\n\t- ZoneAddNode\n\t- ZonePublish\n\t- ZoneChangeset\n",
  "Version": 1,
  "ActionType": "Octopus.Script",
  "Author": "timhunt303",
  "Website": "https://library.octopus.com/step-templates/5e359c05-89a0-4a13-98a4-d54b0415bb45",
  "HistoryUrl": "https://github.com/OctopusDeploy/Library/commits/master/step-templates/dyn-create-an-A-record.json",
  "Category": "Dyn",
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "#--------------------------------------------------------------------\n#Log In Variables\n\n$dynLogInURI = \"https://api.dynect.net/REST/Session/\"\n\n$dynCustomerName = $OctopusParameters[\"dynCustomerName\"] \n\n$dynUserName = $OctopusParameters[\"dynUserName\"] \n\n$dynPassword = $OctopusParameters[\"dynPassword\"] \n\n#--------------------------------------------------------------------\n#Get A Record Variables\n\n$dynARecordURI = \"https://api.dynect.net/REST/ARecord\"\n\n$dynZone = $OctopusParameters[\"dynZone\"]\n\n$dynFQDN = $OctopusParameters[\"dynFQDN\"] \n\n#--------------------------------------------------------------------\n#A Record information to check\n\n$createNewARecord = $FALSE\n\n$UpdateARecord = $FALSE\n\n$dynCorrectTTL = $OctopusParameters[\"dynCorrectTTL\"]\n\n$dynCorrectIPAddress = $OctopusParameters[\"dynCorrectIPAddress\"] \n\n\n#--------------------------------------------------------------------\n#Publish Zone Variables\n\n$dynPublishURI = \"https://api.dynect.net/REST/Zone\"\n\n$publishZone = $FALSE\n\n\n\n\nWrite-Output \"`n-------------------------`n\"\n\n#--------------------------------------------------------------------\n#Log In and Retrieve Token for this session\n\nWrite-Output \"Logging into Dyn and retrieving session Authentication Token.\"\n\n$dynCredentials = @{}\n\n$dynCredentials.Add(\"customer_name\", $dynCustomerName)\n$dynCredentials.Add(\"user_name\", $dynUserName)\n$dynCredentials.Add(\"password\", $dynPassword)\n\n$dynCredentialsJSON = ConvertTo-Json -InputObject $dynCredentials\n\n$dynLoginResults = Invoke-RestMethod -Uri $dynLogInURI -Body $dynCredentialsJSON -ContentType 'application/json' -Method Post\n\nif($dynLoginResults.status -ne \"success\")\n{\n    Write-Error \"Invalid Log In Details. Please try again.\" -ErrorId E4\n}\nelse\n{\n    Write-Output \"`nLog in was successful.\"\n}\n\n\n\n$dynSessionToken = @{}\n\n$dynSessionToken.Add(\"Auth-Token\", $dynLoginResults.data.token)\n\n\nWrite-Output \"`n-------------------------`n\"\n\n#--------------------------------------------------------------------\n#Get A Record \n\nWrite-Output \"Retrieving specified A record information.`n\"\n\n#get and search all records to get the correct record ID (not a unique id) for existing A Records\n#this is done to check if a A Record does not exist already. This is the only way to do it without getting an error.\n$dynAllRecordsURI = \"https://api.dynect.net/REST/AllRecord/$dynZone\"\n\n \n$dynAllRecordResults = Invoke-RestMethod -Uri $dynAllRecordsURI -Headers $dynSessionToken -ContentType 'application/json' -Method Get \n\nfor($i = 0; $i -lt $dynAllRecordResults.data.Length; $i++)\n{\n    \n    $a = $dynAllRecordResults.data.Get($i)\n\n    $result = $a.contains($dynFQDN)\n\n    if($result -eq $TRUE)\n    {\n        $dynARecordString = $dynAllRecordResults.data.Get($i)\n\n        $dynARecordExists = $TRUE\n\n        $i = $dynAllRecordResults.data.Length\n    }\n    else\n    {\n        $dynARecordExists = $FALSE\n    }\n}\n\n\n\n#checks to see if there is more than one A record with the same name.\nif($dynARecordExists -eq $TRUE)\n{\n    $dynARecordURI = \"$dynARecordURI/$dynZone/$dynFQDN\" \n \n    $dynARecordResults = Invoke-RestMethod -Uri $dynARecordURI -Headers $dynSessionToken -ContentType 'application/json' -Method Get \n\n    if($dynARecordResults.data.Length -gt 1)\n    {\n        Write-Error \"`nThere is more than one A record with the Fully Qualified Domain Name (FQDN) of $dynFQDN. `nThis script does not handle more than one A record witht the same FQDN\" -ErrorId E1\n    }\n\n    if($dynARecordResults.status -ne \"success\")\n    {\n        Write-Error \"Error occurred while trying to retrieve the A Record. Please check the host name and the Fully Qualified Domain Name are correct.\" -ErrorId E1\n    }\n}\n\n\n\n#Checks if the an A record was returned or needs to be created\nif(($dynARecordResults.data.Length -eq 0) -or ($dynARecordExists -eq $FALSE))\n{\n    $createNewARecord = $TRUE\n\n    Write-Warning \"$dynFQDN does not exists. Creating $dynFQDN now.\"\n}\nelse\n{\n    #get information for the specified record\n    $dynARecordString = $dynARecordResults.data\n\n    $dynARecordURI = \"https://api.dynect.net$dynARecordString/\"\n\n    $dynARecord = Invoke-RestMethod -Uri $dynARecordURI -Headers $dynSessionToken -ContentType 'application/json' -Method Get \n\n    $dynARecord = $dynARecord.data\n\n    Write-Output \"`n$dynFQDN has successfully been retrieved.\"\n    \n    Write-Output \"`n-------------------------`n\"\n\n}\n\n#--------------------------------------------------------------------\n#create new A record\n\nif($createNewARecord -eq $TRUE)\n{\n    $dynCreateURI = \"https://api.dynect.net/REST/ARecord/$dynZone/$dynFQDN\"   \n\n    $rData = @{}\n\n    $rData.Add(\"address\", $dynCorrectIPAddress)\n\n    $dynCreateARecord = @{}\n\n    $dynCreateARecord.Add(\"ttl\", $dynCorrectTTL)\n    $dynCreateARecord.Add(\"rdata\", $rData)\n\n    $dynCreateARecordJSON = ConvertTo-Json -InputObject $dynCreateARecord\n\n    $dynCreateResult = Invoke-RestMethod -Uri $dynCreateURI -ContentType 'application/json' -Headers $dynSessionToken -Body $dynCreateARecordJSON  -Method Post\n\n    if($dynCreateResult.status -ne \"success\")\n    {\n        Write-Error \"An error occurred while creating the new A Record. Please check the details that have been entered are correct and try again.\" -ErrorId E4\n\n    }\n    else\n    {\n        Write-Output \"$dynFQDN has successfully been added to the $dynZone zone in Dyn.\"\n\n        $publishZone = $TRUE\n    }\n\n    Write-Output \"`n-------------------------`n\"\n\n\n}\n\n\n\n#--------------------------------------------------------------------\n#checking specified A Record to see if it is correct if it exists\nif($createNewARecord -eq $FALSE)\n{\n    Write-Output \"Checking to see if $dynFQDN is current and contains the correct information.\"\n\n    if($dynARecord.rdata.address -ne $dynCorrectIPAddress)\n    {\n        $UpdateARecord = $TRUE\n\n        Write-Warning \"`n$dynFQDN is out of date. Updating now\"\n\n    }\n\n    if($UpdateARecord -eq $FALSE)\n    {\n        Write-Output \"`n$dynFQDN is up-to-date\"\n    }\n\n    Write-Output \"`n-------------------------`n\"\n}\n#--------------------------------------------------------------------\n#Update A record\n\nif($UpdateARecord -eq $TRUE)\n{\n    Write-Output \"Updating $dynFQDN so that is matches the current information saved in the system.\"\n\n    $dynUpdateURI = $dynARecordURI\n\n    $rData = @{}\n\n    $rData.Add(\"address\", $dynCorrectIPAddress)\n\n    $dynUpdatedARecord = @{}\n\n    \n    $dynUpdatedARecord.Add(\"ttl\", $dynCorrectTTL)\n    $dynUpdatedARecord.Add(\"rdata\", $rData)\n\n    $dynUpdatedARecord = ConvertTo-Json -InputObject $dynUpdatedARecord\n\n    $dynUpdateResult = Invoke-RestMethod -Uri $dynUpdateURI -ContentType 'application/json' -Headers $dynSessionToken -Body $dynUpdatedARecord -Method Put\n    \n    if($dynUpdateResult.status -ne \"success\")\n    {\n        Write-Error \"An error occured while trying to update the $dynFQDN record\"\n    }\n    else\n    {\n        Write-Output \"`nUpdate was successful. Just needs to be published to make it offical.\"\n        \n        $publishZone = $TRUE\n\n    }\n\n\n    Write-Output \"`n-------------------------`n\"\n\n}\n\n#--------------------------------------------------------------------\n#publish update or creation of A Record\n\nif($publishZone -eq $TRUE)\n{\n\n    Write-Output \"Publishing changes made to $dynZone\"\n\n    $publish = @{}\n    $publish.Add(\"publish\", 'true')\n\n    $publish = ConvertTo-Json -InputObject $publish\n\n    $dynPublishURI = \"$dynPublishURI/$dynZone/\"\n\n    $dynPublishResults = Invoke-RestMethod -Uri $dynPublishURI -ContentType 'application/json' -Headers $dynSessionToken -Body $publish -Method Put\n\n    if($dynPublishResults.status -ne \"success\")\n    {\n        Write-Error \"An error occurred during the publication of the $dynZone zone.\" -ErrorId E4\n    }\n    else\n    {\n        Write-Output \"`n$dynZone has successfully been published.\"\n    }\n\n        Write-Output \"`n-------------------------`n\"\n\n}\n\n\n\n\n#--------------------------------------------------------------------\n#Log Out of session\n\nWrite-Output \"Logging out and deleting this session's authentication token\"\n\n$dynLogOutResults = Invoke-RestMethod -Uri $dynLogInURI -ContentType 'application/json' -Headers $dynSessionToken -Method Delete\n\nWhile(($dynLogOutResults.status -ne \"success\") -and ($tries -lt 10))\n{\n    Write-Output \"`nWaiting to log out of Dyn\"\n    $tries++\n    Start-Sleep -Seconds 1\n}\n\nif($dynLogOutResults.status -eq \"success\")\n{\n    $dynSessionToken.Clear()\n    Write-Output $dynSessionToken\n    Write-Output \"`nThis session has been ended successfully and the authentication token has been deleted.\"\n    \n}\nelse\n{\n    Write-Error \"`nAn error occurred while logging out.\" -ErrorId E4\n}\n\n"
  },
  "Parameters": [
    {
      "Id": null,
      "Name": "dynCustomerName",
      "Label": "Dyn Customer Name",
      "HelpText": "The Dyn customer name,  usually the company name",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "dynUserName",
      "Label": "Dyn User Name",
      "HelpText": "User Name of the user that will perform this step\n\nNOTE: The API User MUST have the follow permissions:\n\t- UserLogin\n\t- UserChangepw\n\t- RecordAdd\n\t- RecordUpdate\n        - RecordGet\n\t- ZoneGet\n\t- ZoneAddNode\n\t- ZonePublish\n\t- ZoneChangeset",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "dynPassword",
      "Label": "Password",
      "HelpText": "Password of the user to access Dyn",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": null,
      "Name": "dynZone",
      "Label": "Dyn Zone",
      "HelpText": "The name of the Zone, where you want the A record to be created\n\nFor example: myzone.com",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "dynFQDN",
      "Label": "Fully Qualified Domain Name",
      "HelpText": "The name of the A record that is being created in Fully Qualified Domain Name format\n\nFor example: newrecord.myzone.com",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "dynCorrectTTL",
      "Label": "Time to Live",
      "HelpText": "Limits the lifespan or lifetime of data in a computer network",
      "DefaultValue": "0",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "dynCorrectIPAddress",
      "Label": "IPv4 Address",
      "HelpText": "The IPv4 address of the new A record",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LogoAttachmentKey": "CommunityActionTemplates-55-2018011412241450",
  "LogoAttachmentMimeType": "image/png"
}