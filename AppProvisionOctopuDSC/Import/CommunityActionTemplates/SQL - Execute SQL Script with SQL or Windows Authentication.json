{
  "$type": "Octopus.Core.Model.Projects.CommunityActionTemplate, Octopus.Core",
  "Id": "CommunityActionTemplates-216",
  "Name": "SQL - Execute SQL Script with SQL or Windows Authentication",
  "ExternalId": "3ec610a8-f75c-43da-8d82-8c9b7b334084",
  "Description": "Executes SQL script file(s) against the specified database using either SQL or Windows authentication. SQL Scripts can be hardcoded value or can be from an extracted NuGet package.",
  "Version": 167,
  "ActionType": "Octopus.Script",
  "Author": "RichiePhoebix",
  "Website": "https://library.octopus.com/step-templates/3ec610a8-f75c-43da-8d82-8c9b7b334084",
  "HistoryUrl": "https://github.com/OctopusDeploy/Library/commits/master/step-templates/sql-execute-script-with-authentication.json",
  "Category": "SQL Server",
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "function Get-DBConnection\n{\n    [CmdletBinding()]\n    param\n    (\n        [Parameter(Position = 0)]\n        [string]\n        [ValidateNotNullorEmpty()]\n        $serverInstance,\n\n        [switch]\n        $SqlAuthentication,\n\n        [string]\n        $Username,\n\n        [string]\n        $Password\n    )\n    try\n    {\n        $connection = (New-Object Microsoft.SqlServer.Management.Smo.Server($serverInstance))\n\n        if ($SqlAuthentication)\n        {\n            $connection.ConnectionContext.LoginSecure = $false\n            $connection.ConnectionContext.set_Login($Username)\n            $securePassword = ConvertTo-SecureString $Password -AsPlainText -Force\n            $connection.ConnectionContext.set_SecurePassword($securePassword)\n        }\n        \n        $connection.Refresh()\n        \n        return $connection\n    }\n    catch\n    {\n        throw $_.Exception.InnerException.ToString()\n    }\n        \n}\n\nfunction Invoke-ExecuteSQLScript {\n\n    [CmdletBinding()]\n    param\n    (\n        [parameter(Mandatory = $true, Position = 0)]\n        [ValidateNotNullOrEmpty()]\n        [string]\n        $serverInstance,\n\n        [parameter(Mandatory = $true, Position = 1)]\n        [ValidateNotNullOrEmpty()]\n        [string]\n        $dbName,\n\n        [string]\n        $Authentication,\n\n        [string]\n        $Username,\n\n        [string]\n        $Password,\n\n        [string]\n        $SQLScripts\n    )\n\n    [System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.SMO\") | out-null\n\n    if ($Authentication -eq \"SqlAuthentication\")\n    {\n        $SqlServer = Get-DBConnection -serverInstance $serverInstance -SqlAuthentication -Username $Username -Password $Password\n    }\n    else\n    {\n        $SqlServer = Get-DBConnection -serverInstance $serverInstance\n    }\n\n    if ($null -eq $SqlServer.Databases[$dbName])\n    {\n        throw \"Database $dbName does not exist on server $serverInstance\"\n    }\n    \n    if ($null -ne $SqlServer)\n    {\n        foreach ($SQLScript in $SQLScripts.Split(\"`n\"))\n        {\n            try \n            {\n                $children = $SQLScript -replace \".*\\\\\"\n                $replacematch = $children -replace \"\\*\",\"\\*\" -replace \"\\.\",\"\\.\"\n                $parent = $SQLScript -replace $replacematch\n\n                $scripts = Get-ChildItem -Path $parent -Filter $children\n\n                foreach ($script in $scripts)\n                {\n                    $sr = New-Object System.IO.StreamReader($script.FullName)\n                    $scriptContent = $sr.ReadToEnd()\n                    $SqlServer.Databases[$dbName].ExecuteNonQuery($scriptContent)\n                    $sr.Close()\n\n\t\t\t\t\twrite-verbose (\"Executed manual script - {0}\" -f $script.Name)\n                }\n            }\n            catch \n            {\n                Write-Error $_.Exception\n            }\n        }\n    }\n}\n\nif (Test-Path Variable:OctopusParameters)\n{\n\tif ($null -ne $DacpacPackageExtractStepName -and $DacpacPackageExtractStepName -ne '')\n    {\n        Write-Verbose \"Dacpac Package Extract Step Name not empty. Locating scripts located in the Dacpac Extract Step.\"\n        $installDirPathKey = 'Octopus.Action[{0}].Output.Package.InstallationDirectoryPath' -f $DacpacPackageExtractStepName\n        $installDirPath = $OctopusParameters[$installDirPathKey]\n        $ScriptsToExecute = Join-Path $installDirPath $SqlScripts\n    }\n    else\n    {   \n        Write-Verbose \"Locating scripts from the literal entry of Octopus Parameter SQLScripts\"\n        $ScriptsToExecute = $OctopusParameters[\"SQLScripts\"]\n    }\n    if ($OctopusParameters[\"Authentication\"] -eq \"SqlAuthentication\")\n    {\n        Write-Verbose \"Using Sql Authentication\"\n        Invoke-ExecuteSQLScript -serverInstance $OctopusParameters[\"serverInstance\"] `\n                                -dbName $OctopusParameters[\"dbName\"] `\n                                -Authentication $OctopusParameters[\"Authentication\"] `\n                                -Username $OctopusParameters[\"Username\"] `\n                                -Password $OctopusParameters[\"Password\"] `\n                                -SQLScripts $ScriptsToExecute\n    }\n    else\n    {\n        Write-Verbose \"Using Windows Integrated Authentication\"\n        Invoke-ExecuteSQLScript -serverInstance $OctopusParameters[\"serverInstance\"] `\n                                -dbName $OctopusParameters[\"dbName\"] `\n                                -SQLScripts $ScriptsToExecute\n    }\n}",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.RunOnServer": "false",
    "Octopus.Action.Script.ScriptFileName": "",
    "Octopus.Action.Package.FeedId": "",
    "Octopus.Action.Package.PackageId": ""
  },
  "Parameters": [
    {
      "Id": null,
      "Name": "serverInstance",
      "Label": "Server Instance Name",
      "HelpText": "The SQL Server Instance name",
      "DefaultValue": "",
      "DisplaySettings": {}
    },
    {
      "Id": null,
      "Name": "dbName",
      "Label": "Database Name",
      "HelpText": "The database name",
      "DefaultValue": "",
      "DisplaySettings": {}
    },
    {
      "Id": null,
      "Name": "Authentication",
      "Label": "Authentication",
      "HelpText": "The authentication method",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "SqlAuthentication\nWindowsIntegrated"
      }
    },
    {
      "Id": null,
      "Name": "Username",
      "Label": "Username",
      "HelpText": "The username to use to connect (only applies with SqlAuthentication selected)",
      "DefaultValue": "",
      "DisplaySettings": {}
    },
    {
      "Id": null,
      "Name": "Password",
      "Label": "Password",
      "HelpText": "The password to use to connect (only applies with SqlAuthentication selected)",
      "DefaultValue": "",
      "DisplaySettings": {}
    },
    {
      "Id": null,
      "Name": "SQLScripts",
      "Label": "SQL Scripts",
      "HelpText": "Full path to each script name on a new line\nWildcards are accepted, eg. C:\\Scripts\\*.sql, C:\\Scripts\\Deploy*.sql",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "MultiLineText"
      }
    },
    {
      "Id": null,
      "Name": "DacpacPackageExtractStepName",
      "Label": "DACPAC Package Extract Step Name",
      "HelpText": "Optional: The step in which the DACPAC package was installed. Can be left as blank if SQLScripts is a hardcoded value.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "StepName"
      }
    }
  ],
  "LogoAttachmentKey": "CommunityActionTemplates-207-2018011412241608",
  "LogoAttachmentMimeType": "image/png"
}