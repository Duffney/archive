{
  "$type": "Octopus.Core.Model.Projects.CommunityActionTemplate, Octopus.Core",
  "Id": "CommunityActionTemplates-146",
  "Name": "NetScaler ADC - Enable or Disable Service",
  "ExternalId": "1bd58988-3e56-4cfb-8f87-3769024fcdc3",
  "Description": "Enables or disables a load balancing service i Citrix NetScaler ADC. For documentation, see https://github.com/jnus/NetScalerPSLib\n",
  "Version": 21,
  "ActionType": "Octopus.Script",
  "Author": "jasper@sovs.net",
  "Website": "https://library.octopus.com/step-templates/1bd58988-3e56-4cfb-8f87-3769024fcdc3",
  "HistoryUrl": "https://github.com/OctopusDeploy/Library/commits/master/step-templates/netscaler-adc-enable-or-disable-service.json",
  "Category": "NetScaler",
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "param(\n        [string]$NSAddress,\n        [string]$ServiceName,\n        [string]$Action,\n        [string]$NSUserName,\n        [string]$NSPassword,\n        [string]$NSProtocol\n)\n\n\n$ErrorActionPreference = \"Stop\"\n\nfunction Connect-NSAppliance {\n    <#\n    .SYNOPSIS\n        Connect to NetScaler Appliance\n    .DESCRIPTION\n        Connect to NetScaler Appliance. A custom web request session object will be returned\n    .PARAMETER NSAddress\n        NetScaler Management IP address\n    .PARAMETER NSName\n        NetScaler DNS name or FQDN\n    .PARAMETER NSUserName\n        UserName to access the NetScaler appliance\n    .PARAMETER NSPassword\n        Password to access the NetScaler appliance\n    .PARAMETER Timeout\n        Timeout in seconds to for the token of the connection to the NetScaler appliance. 900 is the default admin configured value.\n    .EXAMPLE\n         $Session = Connect-NSAppliance -NSAddress 10.108.151.1\n    .EXAMPLE\n         $Session = Connect-NSAppliance -NSName mynetscaler.mydomain.com\n    .OUTPUTS\n        CustomPSObject\n    .NOTES\n        Copyright (c) Citrix Systems, Inc. All rights reserved.\n    #>\n    [CmdletBinding()]\n    param (\n        [Parameter(Mandatory=$true,ParameterSetName='Address')] [string]$NSAddress,\n        [Parameter(Mandatory=$true,ParameterSetName='Name')] [string]$NSName,\n        [Parameter(Mandatory=$false)] [string]$NSUserName=\"nsroot\",\n        [Parameter(Mandatory=$false)] [string]$NSPassword=\"nsroot\",\n        [Parameter(Mandatory=$false)] [int]$Timeout=900\n    )\n    Write-Verbose \"$($MyInvocation.MyCommand): Enter\"\n\n    if ($PSCmdlet.ParameterSetName -eq 'Address') {\n        Write-Verbose \"Validating IP Address\"\n        $IPAddressObj = New-Object -TypeName System.Net.IPAddress -ArgumentList 0\n        if (-not [System.Net.IPAddress]::TryParse($NSAddress,[ref]$IPAddressObj)) {\n            throw \"'$NSAddress' is an invalid IP address\"\n        }\n        $nsEndpoint = $NSAddress\n    } elseif ($PSCmdlet.ParameterSetName -eq 'Name') {\n        $nsEndpoint = $NSName\n    }\n\n\n    $login = @{\"login\" = @{\"username\"=$NSUserName;\"password\"=$NSPassword;\"timeout\"=$Timeout}}\n    $loginJson = ConvertTo-Json $login\n\n    try {\n        Write-Verbose \"Calling Invoke-RestMethod for login\"\n        $response = Invoke-RestMethod -Uri \"$($Script:NSURLProtocol)://$nsEndpoint/nitro/v1/config/login\" -Body $loginJson -Method POST -SessionVariable saveSession -ContentType application/json\n\n        if ($response.severity -eq \"ERROR\") {\n            throw \"Error. See response: `n$($response | fl * | Out-String)\"\n        } else {\n            Write-Verbose \"Response:`n$(ConvertTo-Json $response | Out-String)\"\n        }\n    }\n    catch [Exception] {\n        throw $_\n    }\n\n\n    $nsSession = New-Object -TypeName PSObject\n    $nsSession | Add-Member -NotePropertyName Endpoint -NotePropertyValue $nsEndpoint -TypeName String\n    $nsSession | Add-Member -NotePropertyName WebSession  -NotePropertyValue $saveSession -TypeName Microsoft.PowerShell.Commands.WebRequestSession\n\n    Write-Verbose \"$($MyInvocation.MyCommand): Exit\"\n\n    return $nsSession\n}\n\nfunction Set-NSMgmtProtocol {\n    <#\n    .SYNOPSIS\n        Set $Script:NSURLProtocol, this will be used for all subsequent invocation of NITRO APIs\n    .DESCRIPTION\n        Set $Script:NSURLProtocol\n    .PARAMETER Protocol\n        Protocol, acceptable values are \"http\" and \"https\"\n    .EXAMPLE\n        Set-Protocol -Protocol https\n    .NOTES\n        Copyright (c) Citrix Systems, Inc. All rights reserved.\n    #>\n    [CmdletBinding()]\n    param (\n        [Parameter(Mandatory=$true)] [ValidateSet(\"http\",\"https\")] [string]$Protocol\n    )\n\n    Write-Verbose \"$($MyInvocation.MyCommand): Enter\"\n\n    $Script:NSURLProtocol = $Protocol\n\n    Write-Verbose \"$($MyInvocation.MyCommand): Exit\"\n}\n\nfunction Invoke-NSNitroRestApi {\n    <#\n    .SYNOPSIS\n        Invoke NetScaler NITRO REST API\n    .DESCRIPTION\n        Invoke NetScaler NITRO REST API\n    .PARAMETER NSSession\n        An existing custom NetScaler Web Request Session object returned by Connect-NSAppliance\n    .PARAMETER OperationMethod\n        Specifies the method used for the web request\n    .PARAMETER ResourceType\n        Type of the NS appliance resource\n    .PARAMETER ResourceName\n        Name of the NS appliance resource, optional\n    .PARAMETER Action\n        Name of the action to perform on the NS appliance resource\n    .PARAMETER Payload\n        Payload  of the web request, in hashtable format\n    .PARAMETER GetWarning\n        Switch parameter, when turned on, warning message will be sent in 'message' field and 'WARNING' value is set in severity field of the response in case there is a warning.\n        Turned off by default\n    .PARAMETER OnErrorAction\n        Use this parameter to set the onerror status for nitro request. Applicable only for bulk requests.\n        Acceptable values: \"EXIT\", \"CONTINUE\", \"ROLLBACK\", default to \"EXIT\"\n    .EXAMPLE\n        Invoke NITRO REST API to add a DNS Server resource.\n        $payload = @{ip=\"10.8.115.210\"}\n        Invoke-NSNitroRestApi -NSSession $Session -OperationMethod POST -ResourceType dnsnameserver -Payload $payload -Action add\n    .OUTPUTS\n        Only when the OperationMethod is GET:\n        PSCustomObject that represents the JSON response content. This object can be manipulated using the ConvertTo-Json Cmdlet.\n    .NOTES\n        Copyright (c) Citrix Systems, Inc. All rights reserved.\n    #>\n    [CmdletBinding()]\n    param (\n        [Parameter(Mandatory=$true)] [PSObject]$NSSession,\n        [Parameter(Mandatory=$true)] [ValidateSet(\"DELETE\",\"GET\",\"POST\",\"PUT\")] [string]$OperationMethod,\n        [Parameter(Mandatory=$true)] [string]$ResourceType,\n        [Parameter(Mandatory=$false)] [string]$ResourceName,\n        [Parameter(Mandatory=$false)] [string]$Action,\n        [Parameter(Mandatory=$false)] [ValidateScript({$OperationMethod -eq \"GET\"})] [hashtable]$Arguments=@{},\n        [Parameter(Mandatory=$false)] [ValidateScript({$OperationMethod -ne \"GET\"})] [hashtable]$Payload=@{},\n        [Parameter(Mandatory=$false)] [switch]$GetWarning=$false,\n        [Parameter(Mandatory=$false)] [ValidateSet(\"EXIT\", \"CONTINUE\", \"ROLLBACK\")] [string]$OnErrorAction=\"EXIT\"\n    )\n\n    Write-Verbose \"$($MyInvocation.MyCommand): Enter\"\n\n    Write-Verbose \"Building URI\"\n    $uri = \"$($Script:NSURLProtocol)://$($NSSession.Endpoint)/nitro/v1/config/$ResourceType\"\n    if (-not [string]::IsNullOrEmpty($ResourceName)) {\n        $uri += \"/$ResourceName\"\n    }\n    if ($OperationMethod -ne \"GET\") {\n        if (-not [string]::IsNullOrEmpty($Action)) {\n            $uri += \"?action=$Action\"\n        }\n    } else {\n        if ($Arguments.Count -gt 0) {\n            $uri += \"?args=\"\n            $argsList = @()\n            foreach ($arg in $Arguments.GetEnumerator()) {\n                $argsList += \"$($arg.Name):$([System.Uri]::EscapeDataString($arg.Value))\"\n            }\n            $uri += $argsList -join ','\n        }\n        #TODO: Add filter, view, and pagesize\n    }\n    Write-Verbose \"URI: $uri\"\n\n    if ($OperationMethod -ne \"GET\") {\n        Write-Verbose \"Building Payload\"\n        $warning = if ($GetWarning) { \"YES\" } else { \"NO\" }\n        $hashtablePayload = @{}\n        $hashtablePayload.\"params\" = @{\"warning\"=$warning;\"onerror\"=$OnErrorAction;<#\"action\"=$Action#>}\n        $hashtablePayload.$ResourceType = $Payload\n        $jsonPayload = ConvertTo-Json $hashtablePayload -Depth ([int]::MaxValue)\n        Write-Verbose \"JSON Payload:`n$jsonPayload\"\n    }\n\n    try {\n        Write-Verbose \"Calling Invoke-RestMethod\"\n        $restParams = @{\n            Uri = $uri\n            ContentType = \"application/json\"\n            Method = $OperationMethod\n            WebSession = $NSSession.WebSession\n            ErrorVariable = \"restError\"\n        }\n\n        if ($OperationMethod -ne \"GET\") {\n            $restParams.Add(\"Body\",$jsonPayload)\n        }\n\n        $response = Invoke-RestMethod @restParams\n\n        if ($response) {\n            if ($response.severity -eq \"ERROR\") {\n                throw \"Error. See response: `n$($response | fl * | Out-String)\"\n            } else {\n                Write-Verbose \"Response:`n$(ConvertTo-Json $response | Out-String)\"\n            }\n        }\n    }\n    catch [Exception] {\n        if ($ResourceType -eq \"reboot\" -and $restError[0].Message -eq \"The underlying connection was closed: The connection was closed unexpectedly.\") {\n            Write-Verbose \"Connection closed due to reboot\"\n        } else {\n            throw $_\n        }\n    }\n\n    Write-Verbose \"$($MyInvocation.MyCommand): Exit\"\n\n    if ($OperationMethod -eq \"GET\") {\n        return $response\n    }\n}\n\n$psver = $PSVersionTable.PSVersion.Major\nif ($psver -eq \"1\" -or $psver -eq \"2\") {\n    Write-Error \"NetScaler ADC Enable Disable Service requires PowerShell v3 or newer. Installed version v$psver\"\n    return -1\n}\n\n$NSAddress = $OctopusParameters['HostName']\n$NSUserName = $OctopusParameters['Username']\n$NSPassword = $OctopusParameters['Password']\n$NSProtocol=\"http\"\n$Action = $OctopusParameters['EnableOrDisable']\n$ServiceName = $OctopusParameters['ServiceName']\n$GracefulShutdown = $OctopusParameters['Graceful']\n$GraceFulShutdownDelay = $OctopusParameters['GracefulDelay']\n\nif(!$NSAddress) {\n    Write-Error \"No NetScaler address specified. Please specify an address\"\n    exit -2\n}\n\nif(!$NSUserName) {\n    Write-Error \"No username specified. Please specify a username\"\n    exit -2\n}\n\nif(!$NSPassword) {\n    Write-Error \"No password specified. Please specify a password\"\n    exit -2\n}\n\nif(!$Action) {\n    Write-Error \"No action set. Action must either be enable or disable. Please select an action\"\n    exit -2\n}\n\nif(!$GracefulShutdown) {\n    Write-Error \"Graceful shutdown not selected. Must either be yes or no. Please select an option\"\n    exit -2\n}\n\nif(!$ServiceName) {\n    Write-Error \"Service name must be specified. Please specify service name\"\n    exist -2\n}\n\n\nSet-NSMgmtProtocol -Protocol $NSProtocol\n$myNSSession = Connect-NSAppliance -NSAddress $NSAddress -NSUserName $NSUserName -NSPassword $NSPassword\n$payload = @{name=$ServiceName}\nif($Action -eq \"disable\") {\n    $payload = @{name=$ServiceName;graceful=$GracefulShutdown;delay=$GraceFulShutdownDelay}\n}\n\nInvoke-NSNitroRestApi -NSSession $myNSSession -OperationMethod POST -ResourceType service -Payload $payload -Action $Action\n",
    "Octopus.Action.Script.Syntax": "PowerShell"
  },
  "Parameters": [
    {
      "Id": null,
      "Name": "EnableOrDisable",
      "Label": "Service status",
      "HelpText": "Option whether to disable og enable a Load Balancing Service",
      "DefaultValue": "enable",
      "DisplaySettings": {
        "Octopus.SelectOptions": "enable|Enable\ndisable|Disable",
        "Octopus.ControlType": "Select"
      }
    },
    {
      "Id": null,
      "Name": "ServiceName",
      "Label": "LB Service Name",
      "HelpText": "Load Balancing Service Name to enable or diable",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "HostName",
      "Label": "NetScaler ADC host name",
      "HelpText": "Address of the primary NetScaler ADC instance",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "Username",
      "Label": "NetScaler ADC username",
      "HelpText": null,
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "Password",
      "Label": "NetScaler ADC password",
      "HelpText": null,
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "Graceful",
      "Label": "Graceful shutdown",
      "HelpText": "The service is disabled only when all the current active client connections are closed by either the server or the client",
      "DefaultValue": "Yes",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "YES|Yes\nNO|No"
      }
    },
    {
      "Id": null,
      "Name": "GracefulDelay",
      "Label": "Graceful Delay (s)",
      "HelpText": "The time in seconds after which the service is marked as OUT OF SERVICE.",
      "DefaultValue": "300",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LogoAttachmentKey": "CommunityActionTemplates-138-2018011412241539",
  "LogoAttachmentMimeType": "image/png"
}