{
  "$type": "Octopus.Core.Model.Projects.CommunityActionTemplate, Octopus.Core",
  "Id": "CommunityActionTemplates-207",
  "Name": "SQL - Create Database Login and User using SMO",
  "ExternalId": "7ed93dfa-b137-4341-9c6c-84fa0565d865",
  "Description": "Requires SMO to be installed on the machine where this step will be run.",
  "Version": 8,
  "ActionType": "Octopus.Script",
  "Author": "trevorpilley",
  "Website": "https://library.octopus.com/step-templates/7ed93dfa-b137-4341-9c6c-84fa0565d865",
  "HistoryUrl": "https://github.com/OctopusDeploy/Library/commits/master/step-templates/sql-smo-create-login-and-user.json",
  "Category": "SQL Server",
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.SqlServer.SMO') | out-null\n\ntry\n{\n    $server = New-Object ('Microsoft.SqlServer.Management.Smo.Server') $SqlServer\n    \n    $server.ConnectionContext.LoginSecure = $true\n\n    if(!$server.Databases.Contains($SqlDatabase))\n    {\n        throw \"Server $SqlServer does not contain a database named $SqlDatabase\"\n    }\n\n    if ($server.Logins.Contains($LoginName))\n    {\n        Write-Host \"Login $LoginName already exists in the server $SqlServer\"\n    }\n    else\n    {\n        Write-Host \"Login $LoginName does not exist, creating\"\n        $login = New-Object -TypeName Microsoft.SqlServer.Management.Smo.Login -ArgumentList $SqlServer, $LoginName\n        $login.LoginType = [Microsoft.SqlServer.Management.Smo.LoginType]::WindowsUser\n        $login.PasswordExpirationEnabled = $false\n        $login.Create()\n        Write-Host \"Login $LoginName created successfully.\"\n    }\n\n    $database = $server.Databases[$SqlDatabase]\n\n    if ($database.Users[$LoginName])\n    {\n        Write-Host \"User $LoginName already exists in the database $SqlDatabase\"\n    }\n    else\n    {\n        Write-Host \"User $LoginName does not exist in the database $SqlDatabase, creating.\"\n        $dbUser = New-Object -TypeName Microsoft.SqlServer.Management.Smo.User -ArgumentList $database, $LoginName\n        $dbUser.Login = $LoginName\n        $dbUser.Create()\n        Write-Host \"User $LoginName created successfully in the database $SqlDatabase.\"\n    }\n\n    if($SqlRole -ne $null)\n    {\n        $sqlRoles = $SqlRole.Split(\",\")\n            \n        # Remove the user from any roles which aren't specified in the $SqlRole parameter if they are a member\n        $database.Users[$LoginName].EnumRoles() | ForEach {\n            if (!$sqlRoles.Contains($_)) {\n                $dbRole = $database.Roles[$_]\n                $dbRole.DropMember($LoginName)\n                $dbRole.Alter()\n                Write-Host \"User $LoginName removed from $_ role in the database $SqlDatabase.\"\n            }\n        }\n            \n        # Add the user to any roles which are specified in the $SqlRole parameter if they are not already a member\n        $sqlRoles | ForEach {\n            $dbRole = $database.Roles[$_]\n            if(!$dbRole)  { throw \"Database $SqlDatabase does not contain a role named $_\" }\n\n            if (!$dbRole.EnumMembers().Contains($LoginName))\n            {\n                $dbRole.AddMember($LoginName)\n                $dbRole.Alter()\n                Write-Host \"User $LoginName successfully added to $_ role in the database $SqlDatabase.\"\n            }\n        }\n    }\n}\ncatch\n{\n    $error[0] | format-list -force\n    Exit 1\n}",
    "Octopus.Action.Script.Syntax": "PowerShell"
  },
  "Parameters": [
    {
      "Id": null,
      "Name": "SqlServer",
      "Label": "Database Server Name",
      "HelpText": "Name of the to create the login for.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "SqlDatabase",
      "Label": "Database Name",
      "HelpText": "Name of the database. The created Login and User will get the role dbowner by defaultfor this database.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "LoginName",
      "Label": "Windows Login Name",
      "HelpText": "The login name to create a login and user in the database for. In our projects we use integrated security - you should too.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "SqlRole",
      "Label": "Database Role Names",
      "HelpText": "We default to `db_owner`, you might want to change this to suit your needs. You may specify multiple roles separated by a comma (e.g. `db_datareader,db_datawriter`)",
      "DefaultValue": "db_owner",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LogoAttachmentKey": "CommunityActionTemplates-198-2018011412241602",
  "LogoAttachmentMimeType": "image/png"
}