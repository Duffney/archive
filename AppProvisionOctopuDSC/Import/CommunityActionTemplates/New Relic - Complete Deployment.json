{
  "$type": "Octopus.Core.Model.Projects.CommunityActionTemplate, Octopus.Core",
  "Id": "CommunityActionTemplates-149",
  "Name": "New Relic - Complete Deployment",
  "ExternalId": "7c88ea1e-de71-452d-be7e-b99dda397ba7",
  "Description": "Notifies [New Relic](https://newrelic.com) of a deployment.\nSends the revision/version number, deployer, etc from the Octopus deployment.",
  "Version": 22,
  "ActionType": "Octopus.Script",
  "Author": "DavidDeSloovere",
  "Website": "https://library.octopus.com/step-templates/7c88ea1e-de71-452d-be7e-b99dda397ba7",
  "HistoryUrl": "https://github.com/OctopusDeploy/Library/commits/master/step-templates/newrelic-complete-deployment.json",
  "Category": "New Relic",
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "# Minimum PowerShell version for ConvertTo-Json is 3\n\nAdd-Type -AssemblyName System.Web\n\n$apiKey = $OctopusParameters['ApiKey']\n$user = $OctopusParameters['User']\n$appId = $OctopusParameters['AppId']\n\n#http://docs.octopusdeploy.com/display/OD/System+variables\n$releaseNumber = $OctopusParameters['Octopus.Release.Number']\n$releaseNotes = $OctopusParameters['Octopus.Release.Notes']\n$machineName = $OctopusParameters['Octopus.Machine.Name']\n$projectName = $OctopusParameters['Octopus.Project.Name']\n$deploymentLink = $OctopusParameters['Octopus.Web.DeploymentLink']\n\n## --------------------------------------------------------------------------------------\n## Helpers\n## --------------------------------------------------------------------------------------\n# Helper for validating input parameters\nfunction Validate-Parameter([string]$foo, [string[]]$validInput, $parameterName) {\n    Write-Host \"${parameterName}: $foo\"\n    if (! $foo) {\n        throw \"No value was set for $parameterName, and it cannot be empty\"\n    }\n    \n    if ($validInput) {\n        if (! $validInput -contains $foo) {\n            throw \"'$input' is not a valid input for '$parameterName'\"\n        }\n    }\n}\n\n## --------------------------------------------------------------------------------------\n## Configuration\n## --------------------------------------------------------------------------------------\nValidate-Parameter $apiKey -parameterName \"Api Key\"\nValidate-Parameter $user -parameterName \"User\"\n\nif (!$appId) {\n    Write-Host \"NewRelic Deploy - AppId has not been set yet. Skipping call to API.\"\n    exit 0\n}\n\nif ($appId -eq 0) {\n    Write-Host \"NewRelic Deploy - AppId has been set to zero. Skipping call to API.\"\n    exit 0\n}\n\nWrite-Host \"NewRelic Deploy - Notify deployment by $user - App $appId - Rev $revision\"\n\n        \n# https://rpm.newrelic.com/api/explore/application_deployments/create?application_id=1127348\n$deployment = New-Object -TypeName PSObject\n$deployment | Add-Member -MemberType NoteProperty -Name \"user\" -Value $user\n$deployment | Add-Member -MemberType NoteProperty -Name \"revision\" -Value $releaseNumber\n$deployment | Add-Member -MemberType NoteProperty -Name \"changelog\" -Value $releaseNotes\n$deployment | Add-Member -MemberType NoteProperty -Name \"description\" -Value \"Octopus deployment of $projectName to $machineName. ($deploymentLink)\"\n\n$deploymentContainer = New-Object -TypeName PSObject\n$deploymentContainer | Add-Member -MemberType NoteProperty -Name \"deployment\" -Value $deployment\n\n$post = $deploymentContainer | ConvertTo-Json\nWrite-Debug $post\n\n# in production, we need to\n#Create a URI instance since the HttpWebRequest.Create Method will escape the URL by default.\n$URL = \"https://api.newrelic.com/v2/applications/$appId/deployments.json\"\n$URI = New-Object System.Uri($URL,$true)\n\n#Create a request object using the URI\n$request = [System.Net.HttpWebRequest]::Create($URI)\n$request.Method = \"POST\"\n$request.Headers.Add(\"X-Api-Key\",\"$apiKey\");\n$request.ContentType = \"application/json\"\n\n#Build up a nice User Agent\n$request.UserAgent = $(\n    \"{0} (PowerShell {1}; .NET CLR {2}; {3})\" -f $UserAgent, \n    $(if($Host.Version){$Host.Version}else{\"1.0\"}),\n    [Environment]::Version,\n    [Environment]::OSVersion.ToString().Replace(\"Microsoft Windows \", \"Win\")\n)\n\ntry {\n    Write-Host \"Posting data to $URL\"\n    #Create a new stream writer to write the xml to the request stream.\n    $stream = New-Object IO.StreamWriter $request.GetRequestStream()\n    $stream.AutoFlush = $True\n    $PostStr = [System.Text.Encoding]::UTF8.GetBytes($Post)\n    $stream.Write($PostStr, 0,$PostStr.length)\n    $stream.Close()\n \n    #Make the request and get the response\n    $response = $request.GetResponse()    \n    $response.Close()\n\n    if ([int]$response.StatusCode -eq 201) {\n        Write-Host \"NewRelic Deploy - API called succeeded - HTTP $($response.StatusCode).\"\n    } else {\n        Write-Host \"NewRelic Deploy - API called failed - HTTP $($response.StatusCode).\"\n        exit 1\n    }\n} catch [System.Net.WebException] {\n    $ErrorMessage = $_.Exception.Message\n    $res = $_.Exception.Response\n    Write-Host \"NewRelic Deploy - API called failed - $ErrorMessage\" \n    exit 1\n}",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.RunOnServer": "false",
    "Octopus.Action.Script.ScriptFileName": "",
    "Octopus.Action.Package.FeedId": "",
    "Octopus.Action.Package.PackageId": ""
  },
  "Parameters": [
    {
      "Id": null,
      "Name": "ApiKey",
      "Label": "Api Key",
      "HelpText": "Your New Relic API key.",
      "DefaultValue": "",
      "DisplaySettings": {}
    },
    {
      "Id": null,
      "Name": "AppId",
      "Label": "App ID",
      "HelpText": "The ID of the application in New Relic RPM.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "User",
      "Label": "User",
      "HelpText": "The name of the user/process that triggered this deployment.",
      "DefaultValue": "",
      "DisplaySettings": {}
    }
  ],
  "LogoAttachmentKey": "CommunityActionTemplates-141-2018011412241546",
  "LogoAttachmentMimeType": "image/png"
}