{
  "$type": "Octopus.Core.Model.Projects.CommunityActionTemplate, Octopus.Core",
  "Id": "CommunityActionTemplates-75",
  "Name": "File System - Clean Configuration Transforms",
  "ExternalId": "9a2b84db-2940-4d9a-b61f-c82df35cee6c",
  "Description": "Clean out configuration transform files from the installation directory after a deployment (e.g. Web.Release.config, YourApp.Production.config, etc.).",
  "Version": 10,
  "ActionType": "Octopus.Script",
  "Author": "boro2g",
  "Website": "https://library.octopus.com/step-templates/9a2b84db-2940-4d9a-b61f-c82df35cee6c",
  "HistoryUrl": "https://github.com/OctopusDeploy/Library/commits/master/step-templates/file-system-clean-configuration-transforms.json",
  "Category": "File System",
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "# Running outside Octopus Deploy\nparam(\n    [string]$pathToClean,\n    [string]$environmentName,\n    [switch]$whatIf\n)\n\nfunction GetParam($Name, [switch]$Required) {\n    $result = $null\n\n    if ($OctopusParameters -ne $null) {\n        $result = $OctopusParameters[$Name]\n    }\n\n    if ($result -eq $null) {\n        $variable = Get-Variable $Name -EA SilentlyContinue\n        if ($variable -ne $null) {\n            $result = $variable.Value\n        }\n    }\n\n    if ($Required -and [string]::IsNullOrEmpty($result)) {\n        throw \"Missing parameter value $Name\"\n    }\n\n    return $result\n}\n\n& {\n    param(\n        [string]$pathToClean,\n        [string]$environmentName\n    )\n\n    Write-Host \"Cleaning Configuration Transform files from $pathToClean and environment: $environmentName\"\n\n    if (Test-Path $pathToClean) {\n        Write-Host \"Scanning directory $pathToClean\"\n        $regexFilter = \"*.$environmentName.config\" \n        Write-Host \"Filter $regexFilter\"\n\n        if ($pathToClean -eq \"\\\" -or $pathToClean -eq \"/\") {\n            throw \"Cannot clean root directory\"\n        }\n\n        $filesToDelete = Get-ChildItem $pathToClean -Filter $regexFilter -Recurse | `\n                         Where-Object {!$_.PsIsContainer -and ($_.Name -NotMatch \"((?i)(^.*\\.exe\\.config$|.*\\.dll\\.config$)$)\")}\n\n        if (!$filesToDelete -or $filesToDelete.Count -eq 0) {\n            Write-Warning \"There were no files matching the criteria\"\n        } else {\n\n            Write-Host \"Deleting files\"\n            if ($whatIf) {\n                Write-Host \"What if: Performing the operation `\"Remove File`\" on targets\"\n            }\n\n            foreach ($file in $filesToDelete)\n            {\n                Write-Host \"Deleting file $($file.FullName)\"\n                \n                if (!$whatIf) {\n                    Remove-Item $file.FullName -Force\n                }\n            }\n        }\n\n    } else {\n        Write-Warning \"Could not locate path `\"$pathToClean`\"\"\n    }\n\n} `\n(GetParam 'PathToClean' -Required) `\n(GetParam 'EnvironmentName' -Required)\n",
    "Octopus.Action.Script.Syntax": "PowerShell"
  },
  "Parameters": [
    {
      "Id": null,
      "Name": "PathToClean",
      "Label": "Path to clean",
      "HelpText": "The path to clean.\n\nUsually you would set this to `#{Octopus.Action[StepName].Output.Package.InstallationDirectoryPath}`.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": null,
      "Name": "EnvironmentName",
      "Label": "Environment Name",
      "HelpText": "If you want to nuke all config files i.e. `*.*.config` then leave with the default value `*`.\n\nOtherwise to just nuke `*.EnvironmentName.config` then set as the environment name: `#{Octopus.Environment.Name}`",
      "DefaultValue": "*",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LogoAttachmentKey": "CommunityActionTemplates-67-2018011412241459",
  "LogoAttachmentMimeType": "image/png"
}